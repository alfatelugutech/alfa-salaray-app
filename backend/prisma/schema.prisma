// Employee Attendance System - Phase 2 Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  role        UserRole  @default(EMPLOYEE)
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  employee                Employee?
  notifications           Notification[]
  notificationPreferences NotificationPreferences?
  chatbotConversations    ChatbotConversation[]

  @@map("users")
}

// Employee Information
model Employee {
  id           String         @id @default(cuid())
  userId       String         @unique
  employeeId   String         @unique
  department   String?
  position     String?
  hireDate     DateTime
  salary       Decimal?
  status       EmployeeStatus @default(ACTIVE)
  workLocation String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendances         Attendance[]
  leaveRequests       LeaveRequest[]
  shifts              EmployeeShift[]
  payrolls            Payroll[]
  performanceReviews  PerformanceReview[]
  goals               Goal[]
  trainingEnrollments TrainingEnrollment[]
  documents           Document[]

  @@map("employees")
}

// Attendance Management - Phase 2 Enhanced
model Attendance {
  id            String           @id @default(cuid())
  employeeId    String
  date          DateTime
  checkIn       DateTime?
  checkOut      DateTime?
  totalHours    Decimal?
  regularHours  Decimal? // Regular working hours (up to 8 hours)
  overtimeHours Decimal? // Overtime hours (over 8 hours)
  breakHours    Decimal? // Break time (lunch break)
  status        AttendanceStatus @default(PRESENT)
  notes         String?

  // Phase 2 Enhancements
  shiftId          String? // Reference to shift
  location         Json? // GPS coordinates and address
  deviceInfo       Json? // Device information for biometric
  ipAddress        String? // IP address for security
  isRemote         Boolean @default(false) // Remote work flag
  createdBy        String? // User ID who marked the attendance
  checkInSelfie    String? // Morning check-in selfie
  checkOutSelfie   String? // Evening check-out selfie
  checkInLocation  Json? // Check-in GPS location
  checkOutLocation Json? // Check-out GPS location

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  shift    Shift?   @relation(fields: [shiftId], references: [id])

  @@unique([employeeId, date])
  @@map("attendance")
}

// Leave Management
model LeaveRequest {
  id         String      @id @default(cuid())
  employeeId String
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  days       Int
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  comments   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

// Phase 2: Shift Management
model Shift {
  id            String   @id @default(cuid())
  name          String
  startTime     String // Format: "09:00"
  endTime       String // Format: "17:00"
  breakDuration Int      @default(60) // Break duration in minutes
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  attendances Attendance[]
  employees   EmployeeShift[]

  @@map("shifts")
}

// Phase 2: Employee Shift Assignment
model EmployeeShift {
  id         String    @id @default(cuid())
  employeeId String
  shiftId    String
  startDate  DateTime
  endDate    DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  shift    Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([employeeId, shiftId, startDate])
  @@map("employee_shifts")
}

// Phase 2: Payroll Management
model Payroll {
  id          String        @id @default(cuid())
  employeeId  String
  month       Int // 1-12
  year        Int
  basicSalary Decimal
  overtimePay Decimal       @default(0)
  allowances  Decimal       @default(0)
  deductions  Decimal       @default(0)
  netSalary   Decimal
  status      PayrollStatus @default(PENDING)
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month, year])
  @@map("payroll")
}

// Phase 2: System Settings
model SystemSetting {
  id        String      @id @default(cuid())
  key       String      @unique
  value     String
  type      SettingType @default(STRING)
  category  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("system_settings")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  HR_MANAGER
  DEPARTMENT_MANAGER
  EMPLOYEE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EARLY_LEAVE
  HALF_DAY
}

enum LeaveType {
  SICK_LEAVE
  VACATION
  PERSONAL_LEAVE
  EMERGENCY_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Phase 2 Enums
enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  CANCELLED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// Phase 3: Notification System
model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  recipient String
  subject   String?
  message   String
  template  String?
  data      Json?
  status    NotificationStatus @default(PENDING)
  sentAt    DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationPreferences {
  id              String   @id @default(cuid())
  userId          String   @unique
  emailEnabled    Boolean  @default(true)
  smsEnabled      Boolean  @default(true)
  pushEnabled     Boolean  @default(true)
  whatsappEnabled Boolean  @default(false)
  quietHours      Json? // { enabled: boolean, start: string, end: string }
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  WHATSAPP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

// Phase 3: AI & Automation
model ChatbotConversation {
  id          String   @id @default(cuid())
  userId      String
  userMessage String
  botResponse String
  intent      String
  confidence  Float
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chatbot_conversations")
}

// Phase 3: Advanced HR Features
model PerformanceReview {
  id                  String   @id @default(cuid())
  employeeId          String
  period              String
  overallRating       Int
  overallScore        Int
  comments            String?
  strengths           String[]
  areasForImprovement String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  employee     Employee                @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  goals        PerformanceGoal[]
  competencies PerformanceCompetency[]

  @@map("performance_reviews")
}

model PerformanceGoal {
  id          String   @id @default(cuid())
  reviewId    String
  title       String
  description String
  targetValue Float
  actualValue Float
  weight      Float
  achievement Int
  createdAt   DateTime @default(now())

  // Relations
  review PerformanceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("performance_goals")
}

model PerformanceCompetency {
  id        String   @id @default(cuid())
  reviewId  String
  name      String
  rating    Int
  comments  String?
  createdAt DateTime @default(now())

  // Relations
  review PerformanceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("performance_competencies")
}

model Goal {
  id          String       @id @default(cuid())
  employeeId  String
  title       String
  description String
  category    GoalCategory
  targetValue Float
  actualValue Float?
  unit        String
  startDate   DateTime
  endDate     DateTime
  priority    GoalPriority
  status      GoalStatus   @default(DRAFT)
  comments    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Training {
  id              String         @id @default(cuid())
  title           String
  description     String
  category        String
  duration        Int // in hours
  instructor      String
  startDate       DateTime
  endDate         DateTime
  maxParticipants Int
  requirements    String[]
  status          TrainingStatus @default(SCHEDULED)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  participants TrainingEnrollment[]

  @@map("trainings")
}

model TrainingEnrollment {
  id          String           @id @default(cuid())
  trainingId  String
  employeeId  String
  status      EnrollmentStatus @default(ENROLLED)
  score       Float?
  feedback    String?
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?

  // Relations
  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("training_enrollments")
}

model Document {
  id           String         @id @default(cuid())
  employeeId   String
  title        String
  description  String?
  category     String
  documentType String
  fileUrl      String
  expiryDate   DateTime?
  status       DocumentStatus @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum GoalCategory {
  PERFORMANCE
  DEVELOPMENT
  BEHAVIORAL
  QUANTITATIVE
}

enum GoalPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum GoalStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TrainingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentStatus {
  ACTIVE
  EXPIRED
  ARCHIVED
}
