// Employee Attendance System - Phase 1 Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  role          UserRole  @default(EMPLOYEE)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  employee      Employee?
  attendances   Attendance[]
  leaveRequests LeaveRequest[]
  createdBy     User?     @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById   String?
  createdUsers  User[]    @relation("UserCreatedBy")

  @@map("users")
}

// Employee Information
model Employee {
  id              String    @id @default(cuid())
  userId          String    @unique
  employeeId      String    @unique
  department      String?
  position        String?
  managerId       String?
  hireDate        DateTime
  salary          Decimal?
  status          EmployeeStatus @default(ACTIVE)
  workLocation    String?
  emergencyContact Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  manager         Employee? @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates    Employee[] @relation("EmployeeManager")
  attendances     Attendance[]
  leaveRequests   LeaveRequest[]

  @@map("employees")
}

// Attendance Management
model Attendance {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime
  checkIn     DateTime?
  checkOut    DateTime?
  totalHours  Decimal?
  status      AttendanceStatus @default(PRESENT)
  notes       String?
  createdBy   String?  // User ID who marked the attendance
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@map("attendance")
}

// Leave Management
model LeaveRequest {
  id          String   @id @default(cuid())
  employeeId  String
  leaveType   LeaveType
  startDate   DateTime
  endDate     DateTime
  days        Int
  reason      String
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  HR_MANAGER
  DEPARTMENT_MANAGER
  EMPLOYEE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EARLY_LEAVE
  HALF_DAY
}

enum LeaveType {
  SICK_LEAVE
  VACATION
  PERSONAL_LEAVE
  EMERGENCY_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
