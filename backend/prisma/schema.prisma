// Employee Attendance System - Phase 2 Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  mobileNumber  String?   @unique // Mobile number for login
  password      String
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  role          UserRole  @default(EMPLOYEE)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  employee      Employee?
  managedDepartments Department[] @relation("DepartmentManager")
  createdRoles  Role[] @relation("RoleCreator")
  assignedRoles UserRoleAssignment[]
  assignedRolesBy UserRoleAssignment[] @relation("RoleAssigner")
  notifications Notification[]
  notificationPreferences NotificationPreference?
  auditLogs     AuditLog[]
  createdBackups Backup[]
  updatedPayrollSettings PayrollSettings[]

  @@map("users")
}

// Department Management
model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  managerId   String?  // Department manager
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employees   Employee[]
  manager    User?      @relation("DepartmentManager", fields: [managerId], references: [id])

  @@map("departments")
}

// Employee Information
model Employee {
  id              String    @id @default(cuid())
  userId          String    @unique
  employeeId      String    @unique
  departmentId    String?   // Reference to Department
  position        String?
  hireDate        DateTime
  dateOfBirth     DateTime? // Date of birth
  mobileNumber    String?   // Mobile number for login
  workLocation    String?
  salary          Decimal?
  hourlyRate      Decimal?   // Hourly rate for hourly employees
  payrollMethod   PayrollCalculationMethod @default(FIXED_SALARY)
  status          EmployeeStatus @default(ACTIVE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  department      Department? @relation(fields: [departmentId], references: [id])
  attendances     Attendance[]
  leaveRequests   LeaveRequest[]
  shifts          EmployeeShift[]
  payrolls        Payroll[]
  locationTracking LocationTracking[] // Location tracking history

  @@map("employees")
}

// Attendance Management - Phase 2 Enhanced
model Attendance {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime
  checkIn     DateTime?
  checkOut    DateTime?
  totalHours  Decimal?
  regularHours Decimal?  // Regular working hours (up to 8 hours)
  overtimeHours Decimal? // Overtime hours (over 8 hours)
  breakHours Decimal?    // Break time (lunch break)
  status      AttendanceStatus @default(PRESENT)
  notes       String?
  
  // Phase 2 Enhancements
  shiftId     String?  // Reference to shift
  location    Json?    // GPS coordinates and address
  deviceInfo  Json?    // Device information for biometric
  ipAddress   String?  // IP address for security
  isRemote    Boolean  @default(false) // Remote work flag
  createdBy   String?  // User ID who marked the attendance
  checkInSelfie  String?  // Morning check-in selfie
  checkOutSelfie String?  // Evening check-out selfie
  checkInLocation Json?    // Check-in GPS location
  checkOutLocation Json?   // Check-out GPS location
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  shift       Shift?   @relation(fields: [shiftId], references: [id])
  locationTracking LocationTracking[] // Location tracking history

  @@unique([employeeId, date])
  @@map("attendance")
}

// Location Tracking - Continuous tracking from check-in to check-out
model LocationTracking {
  id          String   @id @default(cuid())
  attendanceId String  // Reference to attendance record
  employeeId  String   // Reference to employee
  latitude    Float    // GPS latitude
  longitude   Float    // GPS longitude
  accuracy    Float?   // GPS accuracy in meters
  address     String?  // Reverse geocoded address
  timestamp   DateTime @default(now()) // When location was recorded
  isActive    Boolean  @default(true) // Whether employee is still active
  
  // Relations
  attendance  Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  employee    Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@map("location_tracking")
}

// Leave Management
model LeaveRequest {
  id          String   @id @default(cuid())
  employeeId  String
  leaveType   LeaveType
  startDate   DateTime
  endDate     DateTime
  days        Int
  reason      String
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

// Phase 2: Shift Management
model Shift {
  id          String   @id @default(cuid())
  name        String
  startTime   String   // Format: "09:00"
  endTime     String   // Format: "17:00"
  breakDuration Int    @default(60) // Break duration in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  attendances Attendance[]
  employees   EmployeeShift[]

  @@map("shifts")
}

// Phase 2: Employee Shift Assignment
model EmployeeShift {
  id        String   @id @default(cuid())
  employeeId String
  shiftId   String
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employee  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  shift     Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([employeeId, shiftId, startDate])
  @@map("employee_shifts")
}

// Phase 2: Payroll Management
model Payroll {
  id            String   @id @default(cuid())
  employeeId    String
  month         Int      // 1-12
  year          Int
  basicSalary   Decimal
  overtimePay   Decimal  @default(0)
  allowances    Decimal  @default(0)
  deductions    Decimal  @default(0)
  netSalary     Decimal
  status        PayrollStatus @default(PENDING)
  paidAt        DateTime?
  
  // Payment details
  paymentMethod PaymentMethod?
  paymentReference String?     // Transaction ID, check number, etc.
  paymentNotes   String?       // Additional payment notes
  processedBy    String?       // User who processed the payment
  processedAt    DateTime?     // When payment was processed
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  employee      Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month, year])
  @@map("payroll")
}

// Phase 2: System Settings
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      SettingType @default(STRING)
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// Notifications System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority @default(MEDIUM)
  read      Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Notification Preferences
model NotificationPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  smsNotifications      Boolean  @default(false)
  attendanceReminders   Boolean  @default(true)
  leaveNotifications    Boolean  @default(true)
  payrollNotifications  Boolean  @default(true)
  systemNotifications   Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

// Audit Logs
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  resource    String
  resourceId  String
  userId      String
  userEmail   String
  timestamp   DateTime @default(now())
  details     Json?
  ipAddress   String?
  userAgent   String?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// Data Backups
model Backup {
  id          String   @id @default(cuid())
  name        String
  type        BackupType
  status      BackupStatus @default(PENDING)
  size        BigInt?
  filePath    String?
  downloadUrl String?
  createdAt   DateTime @default(now())
  completedAt DateTime?
  createdBy   String

  // Relations
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("backups")
}

// Payroll Settings for system-wide configuration
model PayrollSettings {
  id                    String   @id @default(cuid())
  defaultMethod         PayrollCalculationMethod @default(FIXED_SALARY)
  overtimeMultiplier    Decimal  @default(1.5) // 1.5x for overtime
  regularHoursPerMonth  Int      @default(160) // 40 hours/week * 4 weeks
  regularHoursPerDay   Int        @default(8) // 8 hours per day
  overtimeThreshold     Int       @default(8) // Overtime after 8 hours
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  updatedBy             String

  // Relations
  updatedByUser         User      @relation(fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("payroll_settings")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  HR_MANAGER
  DEPARTMENT_MANAGER
  EMPLOYEE
  CUSTOM // For custom roles
}

// Custom Role Management
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // User who created this role

  // Relations
  permissions RolePermission[]
  users       UserRoleAssignment[]
  createdByUser User @relation("RoleCreator", fields: [createdBy], references: [id])

  @@map("roles")
}

// Permission Management
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String   // e.g., "attendance", "payroll", "employees"
  action      String   // e.g., "create", "read", "update", "delete"
  resource    String   // e.g., "employee", "attendance", "payroll"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

// Role-Permission Mapping
model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  granted      Boolean @default(true)
  createdAt    DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// User-Role Mapping (for custom roles)
model UserRoleAssignment {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedAt DateTime @default(now())
  assignedBy String   // User who assigned this role
  isActive  Boolean  @default(true)

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedByUser User @relation("RoleAssigner", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EARLY_LEAVE
  HALF_DAY
}

enum LeaveType {
  SICK_LEAVE
  VACATION
  PERSONAL_LEAVE
  EMERGENCY_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Phase 2 Enums
enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  CHECK
  MOBILE_MONEY
  CRYPTOCURRENCY
  OTHER
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BackupType {
  FULL
  INCREMENTAL
  DIFFERENTIAL
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum PayrollCalculationMethod {
  FIXED_SALARY
  HOURLY_RATE
  COMMISSION_BASED
  PROJECT_BASED
  MIXED
}
