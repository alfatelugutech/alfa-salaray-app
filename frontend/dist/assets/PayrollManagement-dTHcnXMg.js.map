{"version":3,"file":"PayrollManagement-dTHcnXMg.js","sources":["../../src/pages/PayrollManagement.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\nimport { Plus, Edit, Trash2, DollarSign, Calendar, User, CheckCircle, Clock, Calculator, CreditCard } from 'lucide-react'\nimport { payrollService } from '../services/payrollService'\nimport { employeeService } from '../services/employeeService'\nimport { attendanceService } from '../services/attendanceService'\nimport { Payroll, CreatePayrollData, Employee } from '../types'\nimport toast from 'react-hot-toast'\n\nconst PayrollManagement: React.FC = () => {\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [editingPayroll, setEditingPayroll] = useState<Payroll | null>(null)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n  const [monthFilter, setMonthFilter] = useState('')\n  const [yearFilter, setYearFilter] = useState('')\n  const [selectedEmployee, setSelectedEmployee] = useState('')\n  const [workingHoursData, setWorkingHoursData] = useState<any>(null)\n  \n  // Payment-related state\n  const [showPaymentModal, setShowPaymentModal] = useState(false)\n  const [showBulkPaymentModal, setShowBulkPaymentModal] = useState(false)\n  const [selectedPayroll, setSelectedPayroll] = useState<Payroll | null>(null)\n  const [selectedPayrolls, setSelectedPayrolls] = useState<string[]>([])\n  const [paymentData, setPaymentData] = useState({\n    paymentMethod: 'BANK_TRANSFER',\n    paymentReference: '',\n    paymentNotes: ''\n  })\n\n  const queryClient = useQueryClient()\n\n  // Calculate working hours for selected employee\n  const calculateWorkingHours = async () => {\n    if (!selectedEmployee || !monthFilter || !yearFilter) {\n      toast.error('Please select employee, month, and year')\n      return\n    }\n\n    try {\n      const response = await attendanceService.getAttendance({\n        employeeId: selectedEmployee,\n        startDate: `${yearFilter}-${monthFilter.toString().padStart(2, '0')}-01`,\n        endDate: `${yearFilter}-${monthFilter.toString().padStart(2, '0')}-31`,\n        limit: 100\n      })\n\n      if (response.data.attendances) {\n        let totalRegularHours = 0\n        let totalOvertimeHours = 0\n        let totalBreakHours = 0\n        let totalWorkingDays = 0\n\n        response.data.attendances.forEach((attendance: any) => {\n          if (attendance.regularHours) totalRegularHours += Number(attendance.regularHours)\n          if (attendance.overtimeHours) totalOvertimeHours += Number(attendance.overtimeHours)\n          if (attendance.breakHours) totalBreakHours += Number(attendance.breakHours)\n          if (attendance.status === 'PRESENT' || attendance.status === 'HALF_DAY') totalWorkingDays++\n        })\n\n        setWorkingHoursData({\n          totalRegularHours,\n          totalOvertimeHours,\n          totalBreakHours,\n          totalWorkingDays,\n          totalHours: totalRegularHours + totalOvertimeHours\n        })\n\n        toast.success('Working hours calculated successfully!')\n      }\n    } catch (error) {\n      toast.error('Failed to calculate working hours')\n    }\n  }\n\n  // Fetch payroll records\n  const { data: payrollData, isLoading: payrollLoading } = useQuery({\n    queryKey: ['payroll', searchTerm, statusFilter, monthFilter, yearFilter],\n    queryFn: () => payrollService.getPayrolls({\n      search: searchTerm,\n      status: statusFilter,\n      month: monthFilter ? Number(monthFilter) : undefined,\n      year: yearFilter ? Number(yearFilter) : undefined,\n      limit: 50\n    })\n  })\n\n  // Fetch employees\n  const { data: employeesData } = useQuery({\n    queryKey: ['employees'],\n    queryFn: () => employeeService.getEmployees({ limit: 100 })\n  })\n\n  // Fetch payroll statistics\n  const { data: statsData } = useQuery({\n    queryKey: ['payroll-stats', monthFilter, yearFilter],\n    queryFn: () => payrollService.getPayrollStats({\n      month: monthFilter ? Number(monthFilter) : undefined,\n      year: yearFilter ? Number(yearFilter) : undefined\n    })\n  })\n\n  // Create payroll mutation\n  const createPayrollMutation = useMutation({\n    mutationFn: payrollService.createPayroll,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['payroll'] })\n      queryClient.invalidateQueries({ queryKey: ['payroll-stats'] })\n      setShowCreateModal(false)\n      toast.success('Payroll record created successfully')\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.error || 'Failed to create payroll record')\n    }\n  })\n\n  // Update payroll mutation\n  const updatePayrollMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<CreatePayrollData> }) =>\n      payrollService.updatePayroll(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['payroll'] })\n      queryClient.invalidateQueries({ queryKey: ['payroll-stats'] })\n      setEditingPayroll(null)\n      toast.success('Payroll record updated successfully')\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.error || 'Failed to update payroll record')\n    }\n  })\n\n\n  // Delete payroll mutation\n  const deletePayrollMutation = useMutation({\n    mutationFn: payrollService.deletePayroll,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['payroll'] })\n      queryClient.invalidateQueries({ queryKey: ['payroll-stats'] })\n      toast.success('Payroll record deleted successfully')\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.error || 'Failed to delete payroll record')\n    }\n  })\n\n  // Process payment mutation\n  const processPaymentMutation = useMutation({\n    mutationFn: ({ id, paymentData }: { id: string; paymentData: any }) =>\n      payrollService.processPayment(id, paymentData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['payroll'] })\n      queryClient.invalidateQueries({ queryKey: ['payroll-stats'] })\n      toast.success('Salary payment processed successfully')\n      setShowPaymentModal(false)\n      setSelectedPayroll(null)\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.error || 'Failed to process payment')\n    }\n  })\n\n  // Bulk payment mutation\n  const bulkPaymentMutation = useMutation({\n    mutationFn: payrollService.bulkPayment,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['payroll'] })\n      queryClient.invalidateQueries({ queryKey: ['payroll-stats'] })\n      toast.success(`Bulk payment processed for ${data.updatedCount} employees`)\n      setShowBulkPaymentModal(false)\n      setSelectedPayrolls([])\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.error || 'Failed to process bulk payment')\n    }\n  })\n\n  const handleCreatePayroll = (data: CreatePayrollData) => {\n    createPayrollMutation.mutate(data)\n  }\n\n  const handleUpdatePayroll = (data: Partial<CreatePayrollData>) => {\n    if (editingPayroll) {\n      updatePayrollMutation.mutate({ id: editingPayroll.id, data })\n    }\n  }\n\n\n  const handleDeletePayroll = (id: string) => {\n    if (window.confirm('Are you sure you want to delete this payroll record?')) {\n      deletePayrollMutation.mutate(id)\n    }\n  }\n\n  // Payment handlers\n  const handleProcessPayment = (payroll: Payroll) => {\n    setSelectedPayroll(payroll)\n    setShowPaymentModal(true)\n  }\n\n  const handleBulkPayment = () => {\n    if (selectedPayrolls.length === 0) {\n      toast.error('Please select payroll records for bulk payment')\n      return\n    }\n    setShowBulkPaymentModal(true)\n  }\n\n  const handlePaymentSubmit = () => {\n    if (selectedPayroll) {\n      processPaymentMutation.mutate({\n        id: selectedPayroll.id,\n        paymentData\n      })\n    }\n  }\n\n  const handleBulkPaymentSubmit = () => {\n    bulkPaymentMutation.mutate({\n      payrollIds: selectedPayrolls,\n      ...paymentData\n    })\n  }\n\n  const handlePayrollSelect = (payrollId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedPayrolls([...selectedPayrolls, payrollId])\n    } else {\n      setSelectedPayrolls(selectedPayrolls.filter(id => id !== payrollId))\n    }\n  }\n\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR'\n    }).format(amount)\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'PROCESSED':\n        return 'bg-blue-100 text-blue-800'\n      case 'PAID':\n        return 'bg-green-100 text-green-800'\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getMonthName = (month: number) => {\n    const months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ]\n    return months[month - 1]\n  }\n\n  if (payrollLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Payroll Management</h1>\n          <p className=\"text-gray-600\">Manage employee salaries and payroll processing</p>\n        </div>\n        <div className=\"flex gap-3 mt-4 sm:mt-0\">\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className=\"btn btn-primary\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Payroll\n          </button>\n          {selectedPayrolls.length > 0 && (\n            <button\n              onClick={handleBulkPayment}\n              className=\"btn btn-secondary\"\n            >\n              <CreditCard className=\"w-4 h-4 mr-2\" />\n              Bulk Payment ({selectedPayrolls.length})\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {statsData && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <div className=\"card p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <DollarSign className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Payrolls</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statsData.totalPayrolls}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"card p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                <Calendar className=\"w-6 h-6 text-yellow-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statsData.pendingPayrolls}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"card p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Paid</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statsData.paidPayrolls}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"card p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <DollarSign className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Amount</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(statsData.totalAmount)}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Working Hours Calculation */}\n      <div className=\"card p-6\">\n        <div className=\"flex items-center mb-4\">\n          <Calculator className=\"w-5 h-5 text-blue-600 mr-2\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">Working Hours Calculator</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Employee</label>\n            <select\n              value={selectedEmployee}\n              onChange={(e) => setSelectedEmployee(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">Select Employee</option>\n              {employeesData?.data?.employees?.map((employee: any) => (\n                <option key={employee.id} value={employee.id}>\n                  {employee.name} - {employee.department}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Month</label>\n            <select\n              value={monthFilter}\n              onChange={(e) => setMonthFilter(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">Select Month</option>\n              {Array.from({ length: 12 }, (_, i) => (\n                <option key={i + 1} value={i + 1}>\n                  {getMonthName(i + 1)}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Year</label>\n            <select\n              value={yearFilter}\n              onChange={(e) => setYearFilter(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">Select Year</option>\n              {Array.from({ length: 5 }, (_, i) => {\n                const year = new Date().getFullYear() - 2 + i\n                return (\n                  <option key={year} value={year}>\n                    {year}\n                  </option>\n                )\n              })}\n            </select>\n          </div>\n          \n          <div className=\"flex items-end\">\n            <button\n              onClick={calculateWorkingHours}\n              className=\"w-full btn btn-primary flex items-center justify-center\"\n            >\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Calculate Hours\n            </button>\n          </div>\n        </div>\n\n        {/* Working Hours Results */}\n        {workingHoursData && (\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h4 className=\"text-md font-semibold text-gray-900 mb-3\">Working Hours Summary</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{workingHoursData.totalWorkingDays}</div>\n                <div className=\"text-sm text-gray-600\">Working Days</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{workingHoursData.totalRegularHours.toFixed(1)}h</div>\n                <div className=\"text-sm text-gray-600\">Regular Hours</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">{workingHoursData.totalOvertimeHours.toFixed(1)}h</div>\n                <div className=\"text-sm text-gray-600\">Overtime Hours</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-600\">{workingHoursData.totalBreakHours.toFixed(1)}h</div>\n                <div className=\"text-sm text-gray-600\">Break Hours</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{workingHoursData.totalHours.toFixed(1)}h</div>\n                <div className=\"text-sm text-gray-600\">Total Hours</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Filters */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Search payroll...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"input w-full\"\n          />\n        </div>\n        <select\n          value={statusFilter}\n          onChange={(e) => setStatusFilter(e.target.value)}\n          className=\"input w-full\"\n        >\n          <option value=\"\">All Status</option>\n          <option value=\"PENDING\">Pending</option>\n          <option value=\"PROCESSED\">Processed</option>\n          <option value=\"PAID\">Paid</option>\n          <option value=\"CANCELLED\">Cancelled</option>\n        </select>\n        <select\n          value={monthFilter}\n          onChange={(e) => setMonthFilter(e.target.value)}\n          className=\"input w-full\"\n        >\n          <option value=\"\">All Months</option>\n          {Array.from({ length: 12 }, (_, i) => (\n            <option key={i + 1} value={i + 1}>\n              {getMonthName(i + 1)}\n            </option>\n          ))}\n        </select>\n        <select\n          value={yearFilter}\n          onChange={(e) => setYearFilter(e.target.value)}\n          className=\"input w-full\"\n        >\n          <option value=\"\">All Years</option>\n          {Array.from({ length: 5 }, (_, i) => {\n            const year = new Date().getFullYear() - i\n            return (\n              <option key={year} value={year}>\n                {year}\n              </option>\n            )\n          })}\n        </select>\n        <button\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('')\n            setMonthFilter('')\n            setYearFilter('')\n          }}\n          className=\"btn btn-outline\"\n        >\n          Clear Filters\n        </button>\n      </div>\n\n      {/* Payroll Table */}\n      <div className=\"card overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Employee\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Period\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Basic Salary\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Overtime\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Net Salary\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {payrollData?.data.payrolls?.map((payroll) => (\n                <tr key={payroll.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"flex-shrink-0 h-10 w-10\">\n                        <div className=\"h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center\">\n                          <User className=\"w-5 h-5 text-gray-600\" />\n                        </div>\n                      </div>\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {payroll.employee?.user.firstName} {payroll.employee?.user.lastName}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {payroll.employee?.employeeId}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {getMonthName(payroll.month)} {payroll.year}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatCurrency(payroll.basicSalary)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatCurrency(payroll.overtimePay)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                    {formatCurrency(payroll.netSalary)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(payroll.status)}`}>\n                      {payroll.status}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={() => setEditingPayroll(payroll)}\n                        className=\"text-blue-600 hover:text-blue-900\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </button>\n                      {payroll.status !== 'PAID' && (\n                        <button\n                          onClick={() => handleProcessPayment(payroll)}\n                          className=\"text-green-600 hover:text-green-900\"\n                          title=\"Process Payment\"\n                        >\n                          <CreditCard className=\"w-4 h-4\" />\n                        </button>\n                      )}\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedPayrolls.includes(payroll.id)}\n                        onChange={(e) => handlePayrollSelect(payroll.id, e.target.checked)}\n                        className=\"rounded border-gray-300\"\n                      />\n                      <button\n                        onClick={() => handleDeletePayroll(payroll.id)}\n                        className=\"text-red-600 hover:text-red-900\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Create Payroll Modal */}\n      {showCreateModal && (\n        <CreatePayrollModal\n          employees={employeesData?.data.employees || []}\n          onClose={() => setShowCreateModal(false)}\n          onSubmit={handleCreatePayroll}\n          isLoading={createPayrollMutation.isLoading}\n        />\n      )}\n\n      {/* Edit Payroll Modal */}\n      {editingPayroll && (\n        <EditPayrollModal\n          payroll={editingPayroll}\n          onClose={() => setEditingPayroll(null)}\n          onSubmit={handleUpdatePayroll}\n          isLoading={updatePayrollMutation.isLoading}\n        />\n      )}\n\n      {/* Payment Modal */}\n      {showPaymentModal && selectedPayroll && (\n        <PaymentModal\n          payroll={selectedPayroll}\n          paymentData={paymentData}\n          setPaymentData={setPaymentData}\n          onClose={() => {\n            setShowPaymentModal(false)\n            setSelectedPayroll(null)\n          }}\n          onSubmit={handlePaymentSubmit}\n          isLoading={processPaymentMutation.isLoading}\n        />\n      )}\n\n      {/* Bulk Payment Modal */}\n      {showBulkPaymentModal && (\n        <BulkPaymentModal\n          selectedCount={selectedPayrolls.length}\n          paymentData={paymentData}\n          setPaymentData={setPaymentData}\n          onClose={() => {\n            setShowBulkPaymentModal(false)\n            setSelectedPayrolls([])\n          }}\n          onSubmit={handleBulkPaymentSubmit}\n          isLoading={bulkPaymentMutation.isLoading}\n        />\n      )}\n    </div>\n  )\n}\n\n// Create Payroll Modal Component\nconst CreatePayrollModal: React.FC<{\n  employees: Employee[]\n  onClose: () => void\n  onSubmit: (data: CreatePayrollData) => void\n  isLoading: boolean\n}> = ({ employees, onClose, onSubmit, isLoading }) => {\n  const [formData, setFormData] = useState<CreatePayrollData>({\n    employeeId: '',\n    month: new Date().getMonth() + 1,\n    year: new Date().getFullYear(),\n    basicSalary: 0,\n    overtimePay: 0,\n    allowances: 0,\n    deductions: 0\n  })\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onSubmit(formData)\n  }\n\n  const getMonthName = (month: number) => {\n    const months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ]\n    return months[month - 1]\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4\">Create Payroll Record</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"label\">Employee</label>\n            <select\n              value={formData.employeeId}\n              onChange={(e) => setFormData({ ...formData, employeeId: e.target.value })}\n              className=\"input\"\n              required\n            >\n              <option value=\"\">Select Employee</option>\n              {employees.map((employee) => (\n                <option key={employee.id} value={employee.id}>\n                  {employee.user.firstName} {employee.user.lastName} - {employee.employeeId}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"label\">Month</label>\n              <select\n                value={formData.month}\n                onChange={(e) => setFormData({ ...formData, month: Number(e.target.value) })}\n                className=\"input\"\n                required\n              >\n                {Array.from({ length: 12 }, (_, i) => (\n                  <option key={i + 1} value={i + 1}>\n                    {getMonthName(i + 1)}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"label\">Year</label>\n              <select\n                value={formData.year}\n                onChange={(e) => setFormData({ ...formData, year: Number(e.target.value) })}\n                className=\"input\"\n                required\n              >\n                {Array.from({ length: 5 }, (_, i) => {\n                  const year = new Date().getFullYear() - i\n                  return (\n                    <option key={year} value={year}>\n                      {year}\n                    </option>\n                  )\n                })}\n              </select>\n            </div>\n          </div>\n          <div>\n            <label className=\"label\">Basic Salary</label>\n            <input\n              type=\"number\"\n              value={formData.basicSalary}\n              onChange={(e) => setFormData({ ...formData, basicSalary: Number(e.target.value) })}\n              className=\"input\"\n              min=\"0\"\n              step=\"0.01\"\n              required\n            />\n          </div>\n          <div>\n            <label className=\"label\">Overtime Pay</label>\n            <input\n              type=\"number\"\n              value={formData.overtimePay}\n              onChange={(e) => setFormData({ ...formData, overtimePay: Number(e.target.value) })}\n              className=\"input\"\n              min=\"0\"\n              step=\"0.01\"\n            />\n          </div>\n          <div>\n            <label className=\"label\">Allowances</label>\n            <input\n              type=\"number\"\n              value={formData.allowances}\n              onChange={(e) => setFormData({ ...formData, allowances: Number(e.target.value) })}\n              className=\"input\"\n              min=\"0\"\n              step=\"0.01\"\n            />\n          </div>\n          <div>\n            <label className=\"label\">Deductions</label>\n            <input\n              type=\"number\"\n              value={formData.deductions}\n              onChange={(e) => setFormData({ ...formData, deductions: Number(e.target.value) })}\n              className=\"input\"\n              min=\"0\"\n              step=\"0.01\"\n            />\n          </div>\n          <div className=\"flex justify-end space-x-3\">\n            <button type=\"button\" onClick={onClose} className=\"btn btn-secondary\">\n              Cancel\n            </button>\n            <button type=\"submit\" className=\"btn btn-primary\" disabled={isLoading}>\n              {isLoading ? 'Creating...' : 'Create Payroll'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\n// Edit Payroll Modal Component\nconst EditPayrollModal: React.FC<{\n  payroll: Payroll\n  onClose: () => void\n  onSubmit: (data: Partial<CreatePayrollData>) => void\n  isLoading: boolean\n}> = ({ payroll, onClose, onSubmit, isLoading }) => {\n  const [formData, setFormData] = useState<Partial<CreatePayrollData>>({\n    basicSalary: payroll.basicSalary,\n    overtimePay: payroll.overtimePay,\n    allowances: payroll.allowances,\n    deductions: payroll.deductions\n  })\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onSubmit(formData)\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4\">Edit Payroll Record</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"label\">Basic Salary</label>\n            <input\n              type=\"number\"\n              value={formData.basicSalary}\n              onChange={(e) => setFormData({ ...formData, basicSalary: Number(e.target.value) })}\n              className=\"input\"\n              min=\"0\"\n              step=\"0.01\"\n              required\n            />\n          </div>\n          <div>\n            <label className=\"label\">Overtime Pay</label>\n            <input\n              type=\"number\"\n              value={formData.overtimePay}\n              onChange={(e) => setFormData({ ...formData, overtimePay: Number(e.target.value) })}\n              className=\"input\"\n              min=\"0\"\n              step=\"0.01\"\n            />\n          </div>\n          <div>\n            <label className=\"label\">Allowances</label>\n            <input\n              type=\"number\"\n              value={formData.allowances}\n              onChange={(e) => setFormData({ ...formData, allowances: Number(e.target.value) })}\n              className=\"input\"\n              min=\"0\"\n              step=\"0.01\"\n            />\n          </div>\n          <div>\n            <label className=\"label\">Deductions</label>\n            <input\n              type=\"number\"\n              value={formData.deductions}\n              onChange={(e) => setFormData({ ...formData, deductions: Number(e.target.value) })}\n              className=\"input\"\n              min=\"0\"\n              step=\"0.01\"\n            />\n          </div>\n          <div className=\"flex justify-end space-x-3\">\n            <button type=\"button\" onClick={onClose} className=\"btn btn-secondary\">\n              Cancel\n            </button>\n            <button type=\"submit\" className=\"btn btn-primary\" disabled={isLoading}>\n              {isLoading ? 'Updating...' : 'Update Payroll'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\n// Payment Processing Modal\nconst PaymentModal: React.FC<{\n  payroll: Payroll\n  paymentData: any\n  setPaymentData: (data: any) => void\n  onClose: () => void\n  onSubmit: () => void\n  isLoading: boolean\n}> = ({ payroll, paymentData, setPaymentData, onClose, onSubmit, isLoading }) => {\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onSubmit()\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4\">Process Salary Payment</h2>\n        <div className=\"mb-4 p-4 bg-gray-50 rounded-lg\">\n          <div className=\"text-sm text-gray-600\">Employee: {payroll.employee?.user?.firstName} {payroll.employee?.user?.lastName}</div>\n          <div className=\"text-sm text-gray-600\">Amount: {new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(payroll.netSalary)}</div>\n          <div className=\"text-sm text-gray-600\">Month: {payroll.month}/{payroll.year}</div>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"label\">Payment Method</label>\n            <select\n              value={paymentData.paymentMethod}\n              onChange={(e) => setPaymentData({...paymentData, paymentMethod: e.target.value})}\n              className=\"input\"\n              required\n            >\n              <option value=\"BANK_TRANSFER\">Bank Transfer</option>\n              <option value=\"CASH\">Cash</option>\n              <option value=\"CHECK\">Check</option>\n              <option value=\"MOBILE_MONEY\">Mobile Money</option>\n              <option value=\"CRYPTOCURRENCY\">Cryptocurrency</option>\n              <option value=\"OTHER\">Other</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"label\">Payment Reference</label>\n            <input\n              type=\"text\"\n              value={paymentData.paymentReference}\n              onChange={(e) => setPaymentData({...paymentData, paymentReference: e.target.value})}\n              className=\"input\"\n              placeholder=\"Transaction ID, check number, etc.\"\n            />\n          </div>\n\n          <div>\n            <label className=\"label\">Payment Notes</label>\n            <textarea\n              value={paymentData.paymentNotes}\n              onChange={(e) => setPaymentData({...paymentData, paymentNotes: e.target.value})}\n              className=\"input\"\n              rows={3}\n              placeholder=\"Additional payment notes...\"\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"btn btn-outline\"\n              disabled={isLoading}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Processing...' : 'Process Payment'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\n// Bulk Payment Modal\nconst BulkPaymentModal: React.FC<{\n  selectedCount: number\n  paymentData: any\n  setPaymentData: (data: any) => void\n  onClose: () => void\n  onSubmit: () => void\n  isLoading: boolean\n}> = ({ selectedCount, paymentData, setPaymentData, onClose, onSubmit, isLoading }) => {\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onSubmit()\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4\">Bulk Salary Payment</h2>\n        <div className=\"mb-4 p-4 bg-blue-50 rounded-lg\">\n          <div className=\"text-sm text-blue-600\">Processing payment for {selectedCount} employees</div>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"label\">Payment Method</label>\n            <select\n              value={paymentData.paymentMethod}\n              onChange={(e) => setPaymentData({...paymentData, paymentMethod: e.target.value})}\n              className=\"input\"\n              required\n            >\n              <option value=\"BANK_TRANSFER\">Bank Transfer</option>\n              <option value=\"CASH\">Cash</option>\n              <option value=\"CHECK\">Check</option>\n              <option value=\"MOBILE_MONEY\">Mobile Money</option>\n              <option value=\"CRYPTOCURRENCY\">Cryptocurrency</option>\n              <option value=\"OTHER\">Other</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"label\">Payment Reference</label>\n            <input\n              type=\"text\"\n              value={paymentData.paymentReference}\n              onChange={(e) => setPaymentData({...paymentData, paymentReference: e.target.value})}\n              className=\"input\"\n              placeholder=\"Batch reference, transaction ID, etc.\"\n            />\n          </div>\n\n          <div>\n            <label className=\"label\">Payment Notes</label>\n            <textarea\n              value={paymentData.paymentNotes}\n              onChange={(e) => setPaymentData({...paymentData, paymentNotes: e.target.value})}\n              className=\"input\"\n              rows={3}\n              placeholder=\"Notes for all payments...\"\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"btn btn-outline\"\n              disabled={isLoading}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Processing...' : `Process ${selectedCount} Payments`}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default PayrollManagement\n\n"],"names":["PayrollManagement","showCreateModal","setShowCreateModal","useState","editingPayroll","setEditingPayroll","searchTerm","setSearchTerm","statusFilter","setStatusFilter","monthFilter","setMonthFilter","yearFilter","setYearFilter","selectedEmployee","setSelectedEmployee","workingHoursData","setWorkingHoursData","showPaymentModal","setShowPaymentModal","showBulkPaymentModal","setShowBulkPaymentModal","selectedPayroll","setSelectedPayroll","selectedPayrolls","setSelectedPayrolls","paymentData","setPaymentData","queryClient","useQueryClient","calculateWorkingHours","toast","response","attendanceService","totalRegularHours","totalOvertimeHours","totalBreakHours","totalWorkingDays","attendance","payrollData","payrollLoading","useQuery","payrollService","employeesData","employeeService","statsData","createPayrollMutation","useMutation","error","_b","_a","updatePayrollMutation","id","data","deletePayrollMutation","processPaymentMutation","bulkPaymentMutation","handleCreatePayroll","handleUpdatePayroll","handleDeletePayroll","handleProcessPayment","payroll","handleBulkPayment","handlePaymentSubmit","handleBulkPaymentSubmit","handlePayrollSelect","payrollId","checked","formatCurrency","amount","getStatusColor","status","getMonthName","month","jsx","jsxs","Plus","CreditCard","DollarSign","Calendar","CheckCircle","Calculator","e","employee","_","i","year","Clock","_c","User","Edit","Trash2","CreatePayrollModal","EditPayrollModal","PaymentModal","BulkPaymentModal","employees","onClose","onSubmit","isLoading","formData","setFormData","handleSubmit","_d","selectedCount"],"mappings":"6cASA,MAAMA,GAA8B,IAAM,WACxC,KAAM,CAACC,EAAiBC,CAAkB,EAAIC,EAAAA,SAAS,EAAK,EACtD,CAACC,EAAgBC,CAAiB,EAAIF,EAAAA,SAAyB,IAAI,EACnE,CAACG,EAAYC,CAAa,EAAIJ,EAAAA,SAAS,EAAE,EACzC,CAACK,EAAcC,CAAe,EAAIN,EAAAA,SAAS,EAAE,EAC7C,CAACO,EAAaC,CAAc,EAAIR,EAAAA,SAAS,EAAE,EAC3C,CAACS,EAAYC,CAAa,EAAIV,EAAAA,SAAS,EAAE,EACzC,CAACW,EAAkBC,CAAmB,EAAIZ,EAAAA,SAAS,EAAE,EACrD,CAACa,EAAkBC,CAAmB,EAAId,EAAAA,SAAc,IAAI,EAG5D,CAACe,EAAkBC,CAAmB,EAAIhB,EAAAA,SAAS,EAAK,EACxD,CAACiB,EAAsBC,CAAuB,EAAIlB,EAAAA,SAAS,EAAK,EAChE,CAACmB,EAAiBC,CAAkB,EAAIpB,EAAAA,SAAyB,IAAI,EACrE,CAACqB,EAAkBC,CAAmB,EAAItB,EAAAA,SAAmB,CAAA,CAAE,EAC/D,CAACuB,EAAaC,CAAc,EAAIxB,WAAS,CAC7C,cAAe,gBACf,iBAAkB,GAClB,aAAc,EAAA,CACf,EAEKyB,EAAcC,GAAA,EAGdC,EAAwB,SAAY,CACxC,GAAI,CAAChB,GAAoB,CAACJ,GAAe,CAACE,EAAY,CACpDmB,EAAM,MAAM,yCAAyC,EACrD,MACF,CAEA,GAAI,CACF,MAAMC,EAAW,MAAMC,GAAkB,cAAc,CACrD,WAAYnB,EACZ,UAAW,GAAGF,CAAU,IAAIF,EAAY,WAAW,SAAS,EAAG,GAAG,CAAC,MACnE,QAAS,GAAGE,CAAU,IAAIF,EAAY,WAAW,SAAS,EAAG,GAAG,CAAC,MACjE,MAAO,GAAA,CACR,EAED,GAAIsB,EAAS,KAAK,YAAa,CAC7B,IAAIE,EAAoB,EACpBC,EAAqB,EACrBC,EAAkB,EAClBC,EAAmB,EAEvBL,EAAS,KAAK,YAAY,QAASM,GAAoB,CACjDA,EAAW,eAAcJ,GAAqB,OAAOI,EAAW,YAAY,GAC5EA,EAAW,gBAAeH,GAAsB,OAAOG,EAAW,aAAa,GAC/EA,EAAW,aAAYF,GAAmB,OAAOE,EAAW,UAAU,IACtEA,EAAW,SAAW,WAAaA,EAAW,SAAW,aAAYD,GAC3E,CAAC,EAEDpB,EAAoB,CAClB,kBAAAiB,EACA,mBAAAC,EACA,gBAAAC,EACA,iBAAAC,EACA,WAAYH,EAAoBC,CAAA,CACjC,EAEDJ,EAAM,QAAQ,wCAAwC,CACxD,CACF,MAAgB,CACdA,EAAM,MAAM,mCAAmC,CACjD,CACF,EAGM,CAAE,KAAMQ,EAAa,UAAWC,EAAA,EAAmBC,EAAS,CAChE,SAAU,CAAC,UAAWnC,EAAYE,EAAcE,EAAaE,CAAU,EACvE,QAAS,IAAM8B,EAAe,YAAY,CACxC,OAAQpC,EACR,OAAQE,EACR,MAAOE,EAAc,OAAOA,CAAW,EAAI,OAC3C,KAAME,EAAa,OAAOA,CAAU,EAAI,OACxC,MAAO,EAAA,CACR,CAAA,CACF,EAGK,CAAE,KAAM+B,CAAA,EAAkBF,EAAS,CACvC,SAAU,CAAC,WAAW,EACtB,QAAS,IAAMG,GAAgB,aAAa,CAAE,MAAO,IAAK,CAAA,CAC3D,EAGK,CAAE,KAAMC,CAAA,EAAcJ,EAAS,CACnC,SAAU,CAAC,gBAAiB/B,EAAaE,CAAU,EACnD,QAAS,IAAM8B,EAAe,gBAAgB,CAC5C,MAAOhC,EAAc,OAAOA,CAAW,EAAI,OAC3C,KAAME,EAAa,OAAOA,CAAU,EAAI,MAAA,CACzC,CAAA,CACF,EAGKkC,EAAwBC,EAAY,CACxC,WAAYL,EAAe,cAC3B,UAAW,IAAM,CACfd,EAAY,kBAAkB,CAAE,SAAU,CAAC,SAAS,EAAG,EACvDA,EAAY,kBAAkB,CAAE,SAAU,CAAC,eAAe,EAAG,EAC7D1B,EAAmB,EAAK,EACxB6B,EAAM,QAAQ,qCAAqC,CACrD,EACA,QAAUiB,GAAe,SACvBjB,EAAM,QAAMkB,GAAAC,EAAAF,EAAM,WAAN,YAAAE,EAAgB,OAAhB,YAAAD,EAAsB,QAAS,iCAAiC,CAC9E,CAAA,CACD,EAGKE,EAAwBJ,EAAY,CACxC,WAAY,CAAC,CAAE,GAAAK,EAAI,KAAAC,KACjBX,EAAe,cAAcU,EAAIC,CAAI,EACvC,UAAW,IAAM,CACfzB,EAAY,kBAAkB,CAAE,SAAU,CAAC,SAAS,EAAG,EACvDA,EAAY,kBAAkB,CAAE,SAAU,CAAC,eAAe,EAAG,EAC7DvB,EAAkB,IAAI,EACtB0B,EAAM,QAAQ,qCAAqC,CACrD,EACA,QAAUiB,GAAe,SACvBjB,EAAM,QAAMkB,GAAAC,EAAAF,EAAM,WAAN,YAAAE,EAAgB,OAAhB,YAAAD,EAAsB,QAAS,iCAAiC,CAC9E,CAAA,CACD,EAIKK,GAAwBP,EAAY,CACxC,WAAYL,EAAe,cAC3B,UAAW,IAAM,CACfd,EAAY,kBAAkB,CAAE,SAAU,CAAC,SAAS,EAAG,EACvDA,EAAY,kBAAkB,CAAE,SAAU,CAAC,eAAe,EAAG,EAC7DG,EAAM,QAAQ,qCAAqC,CACrD,EACA,QAAUiB,GAAe,SACvBjB,EAAM,QAAMkB,GAAAC,EAAAF,EAAM,WAAN,YAAAE,EAAgB,OAAhB,YAAAD,EAAsB,QAAS,iCAAiC,CAC9E,CAAA,CACD,EAGKM,EAAyBR,EAAY,CACzC,WAAY,CAAC,CAAE,GAAAK,EAAI,YAAA1B,KACjBgB,EAAe,eAAeU,EAAI1B,CAAW,EAC/C,UAAW,IAAM,CACfE,EAAY,kBAAkB,CAAE,SAAU,CAAC,SAAS,EAAG,EACvDA,EAAY,kBAAkB,CAAE,SAAU,CAAC,eAAe,EAAG,EAC7DG,EAAM,QAAQ,uCAAuC,EACrDZ,EAAoB,EAAK,EACzBI,EAAmB,IAAI,CACzB,EACA,QAAUyB,GAAe,SACvBjB,EAAM,QAAMkB,GAAAC,EAAAF,EAAM,WAAN,YAAAE,EAAgB,OAAhB,YAAAD,EAAsB,QAAS,2BAA2B,CACxE,CAAA,CACD,EAGKO,EAAsBT,EAAY,CACtC,WAAYL,EAAe,YAC3B,UAAYW,GAAS,CACnBzB,EAAY,kBAAkB,CAAE,SAAU,CAAC,SAAS,EAAG,EACvDA,EAAY,kBAAkB,CAAE,SAAU,CAAC,eAAe,EAAG,EAC7DG,EAAM,QAAQ,8BAA8BsB,EAAK,YAAY,YAAY,EACzEhC,EAAwB,EAAK,EAC7BI,EAAoB,CAAA,CAAE,CACxB,EACA,QAAUuB,GAAe,SACvBjB,EAAM,QAAMkB,GAAAC,EAAAF,EAAM,WAAN,YAAAE,EAAgB,OAAhB,YAAAD,EAAsB,QAAS,gCAAgC,CAC7E,CAAA,CACD,EAEKQ,GAAuBJ,GAA4B,CACvDP,EAAsB,OAAOO,CAAI,CACnC,EAEMK,GAAuBL,GAAqC,CAC5DjD,GACF+C,EAAsB,OAAO,CAAE,GAAI/C,EAAe,GAAI,KAAAiD,EAAM,CAEhE,EAGMM,GAAuBP,GAAe,CACtC,OAAO,QAAQ,sDAAsD,GACvEE,GAAsB,OAAOF,CAAE,CAEnC,EAGMQ,GAAwBC,GAAqB,CACjDtC,EAAmBsC,CAAO,EAC1B1C,EAAoB,EAAI,CAC1B,EAEM2C,GAAoB,IAAM,CAC9B,GAAItC,EAAiB,SAAW,EAAG,CACjCO,EAAM,MAAM,gDAAgD,EAC5D,MACF,CACAV,EAAwB,EAAI,CAC9B,EAEM0C,GAAsB,IAAM,CAC5BzC,GACFiC,EAAuB,OAAO,CAC5B,GAAIjC,EAAgB,GACpB,YAAAI,CAAA,CACD,CAEL,EAEMsC,GAA0B,IAAM,CACpCR,EAAoB,OAAO,CACzB,WAAYhC,EACZ,GAAGE,CAAA,CACJ,CACH,EAEMuC,GAAsB,CAACC,EAAmBC,IAAqB,CAEjE1C,EADE0C,EACkB,CAAC,GAAG3C,EAAkB0C,CAAS,EAE/B1C,EAAiB,OAAO4B,GAAMA,IAAOc,CAAS,CAFd,CAIxD,EAGME,EAAkBC,GACf,IAAI,KAAK,aAAa,QAAS,CACpC,MAAO,WACP,SAAU,KAAA,CACX,EAAE,OAAOA,CAAM,EAGZC,GAAkBC,GAAmB,CACzC,OAAQA,EAAA,CACN,IAAK,UACH,MAAO,gCACT,IAAK,YACH,MAAO,4BACT,IAAK,OACH,MAAO,8BACT,IAAK,YACH,MAAO,0BACT,QACE,MAAO,2BAAA,CAEb,EAEMC,EAAgBC,GACL,CACb,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,UAAA,EAE1CA,EAAQ,CAAC,EAGzB,OAAIjC,GAEAkC,MAAC,OAAI,UAAU,wCACb,eAAC,MAAA,CAAI,UAAU,+DAA+D,CAAA,CAChF,EAKFC,EAAAA,KAAC,MAAA,CAAI,UAAU,YAEb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,+DACb,SAAA,CAAAA,OAAC,MAAA,CACC,SAAA,CAAAD,EAAAA,IAAC,KAAA,CAAG,UAAU,mCAAmC,SAAA,qBAAkB,EACnEA,EAAAA,IAAC,IAAA,CAAE,UAAU,gBAAgB,SAAA,iDAAA,CAA+C,CAAA,EAC9E,EACAC,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAA,EAAAA,KAAC,SAAA,CACC,QAAS,IAAMzE,EAAmB,EAAI,EACtC,UAAU,kBAEV,SAAA,CAAAwE,EAAAA,IAACE,GAAA,CAAK,UAAU,cAAA,CAAe,EAAE,gBAAA,CAAA,CAAA,EAGlCpD,EAAiB,OAAS,GACzBmD,EAAAA,KAAC,SAAA,CACC,QAASb,GACT,UAAU,oBAEV,SAAA,CAAAY,EAAAA,IAACG,EAAA,CAAW,UAAU,cAAA,CAAe,EAAE,iBACxBrD,EAAiB,OAAO,GAAA,CAAA,CAAA,CACzC,CAAA,CAEJ,CAAA,EACF,EAGCqB,GACC8B,EAAAA,KAAC,MAAA,CAAI,UAAU,uDACb,SAAA,CAAAD,EAAAA,IAAC,OAAI,UAAU,WACb,SAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAD,EAAAA,IAAC,OAAI,UAAU,6BACb,eAACI,EAAA,CAAW,UAAU,wBAAwB,CAAA,CAChD,EACAH,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAD,EAAAA,IAAC,IAAA,CAAE,UAAU,oCAAoC,SAAA,iBAAc,EAC/DA,EAAAA,IAAC,IAAA,CAAE,UAAU,mCAAoC,WAAU,aAAA,CAAc,CAAA,CAAA,CAC3E,CAAA,CAAA,CACF,CAAA,CACF,QACC,MAAA,CAAI,UAAU,WACb,SAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAD,EAAAA,IAAC,OAAI,UAAU,+BACb,eAACK,GAAA,CAAS,UAAU,0BAA0B,CAAA,CAChD,EACAJ,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAD,EAAAA,IAAC,IAAA,CAAE,UAAU,oCAAoC,SAAA,UAAO,EACxDA,EAAAA,IAAC,IAAA,CAAE,UAAU,mCAAoC,WAAU,eAAA,CAAgB,CAAA,CAAA,CAC7E,CAAA,CAAA,CACF,CAAA,CACF,QACC,MAAA,CAAI,UAAU,WACb,SAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAD,EAAAA,IAAC,OAAI,UAAU,8BACb,eAACM,GAAA,CAAY,UAAU,yBAAyB,CAAA,CAClD,EACAL,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAD,EAAAA,IAAC,IAAA,CAAE,UAAU,oCAAoC,SAAA,OAAI,EACrDA,EAAAA,IAAC,IAAA,CAAE,UAAU,mCAAoC,WAAU,YAAA,CAAa,CAAA,CAAA,CAC1E,CAAA,CAAA,CACF,CAAA,CACF,QACC,MAAA,CAAI,UAAU,WACb,SAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAD,EAAAA,IAAC,OAAI,UAAU,+BACb,eAACI,EAAA,CAAW,UAAU,0BAA0B,CAAA,CAClD,EACAH,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAD,EAAAA,IAAC,IAAA,CAAE,UAAU,oCAAoC,SAAA,eAAY,QAC5D,IAAA,CAAE,UAAU,mCAAoC,SAAAN,EAAevB,EAAU,WAAW,CAAA,CAAE,CAAA,CAAA,CACzF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EAIF8B,EAAAA,KAAC,MAAA,CAAI,UAAU,WACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAD,EAAAA,IAACO,GAAA,CAAW,UAAU,4BAAA,CAA6B,EACnDP,EAAAA,IAAC,KAAA,CAAG,UAAU,sCAAsC,SAAA,0BAAA,CAAwB,CAAA,EAC9E,EAEAC,EAAAA,KAAC,MAAA,CAAI,UAAU,6CACb,SAAA,CAAAA,OAAC,MAAA,CACC,SAAA,CAAAD,EAAAA,IAAC,QAAA,CAAM,UAAU,+CAA+C,SAAA,WAAQ,EACxEC,EAAAA,KAAC,SAAA,CACC,MAAO7D,EACP,SAAWoE,GAAMnE,EAAoBmE,EAAE,OAAO,KAAK,EACnD,UAAU,yGAEV,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,kBAAe,GAC/BzB,GAAAC,EAAAP,GAAA,YAAAA,EAAe,OAAf,YAAAO,EAAqB,YAArB,YAAAD,EAAgC,IAAKkC,GACpCR,OAAC,SAAA,CAAyB,MAAOQ,EAAS,GACvC,SAAA,CAAAA,EAAS,KAAK,MAAIA,EAAS,UAAA,CAAA,EADjBA,EAAS,EAEtB,EACD,CAAA,CAAA,CACH,EACF,SAEC,MAAA,CACC,SAAA,CAAAT,EAAAA,IAAC,QAAA,CAAM,UAAU,+CAA+C,SAAA,QAAK,EACrEC,EAAAA,KAAC,SAAA,CACC,MAAOjE,EACP,SAAWwE,GAAMvE,EAAeuE,EAAE,OAAO,KAAK,EAC9C,UAAU,yGAEV,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,eAAY,EAC5B,MAAM,KAAK,CAAE,OAAQ,IAAM,CAACU,EAAGC,IAC9BX,EAAAA,IAAC,UAAmB,MAAOW,EAAI,EAC5B,SAAAb,EAAaa,EAAI,CAAC,CAAA,EADRA,EAAI,CAEjB,CACD,CAAA,CAAA,CAAA,CACH,EACF,SAEC,MAAA,CACC,SAAA,CAAAX,EAAAA,IAAC,QAAA,CAAM,UAAU,+CAA+C,SAAA,OAAI,EACpEC,EAAAA,KAAC,SAAA,CACC,MAAO/D,EACP,SAAWsE,GAAMrE,EAAcqE,EAAE,OAAO,KAAK,EAC7C,UAAU,yGAEV,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,cAAW,EAC3B,MAAM,KAAK,CAAE,OAAQ,GAAK,CAACU,EAAGC,IAAM,CACnC,MAAMC,EAAO,IAAI,KAAA,EAAO,YAAA,EAAgB,EAAID,EAC5C,OACEX,EAAAA,IAAC,SAAA,CAAkB,MAAOY,EACvB,YADUA,CAEb,CAEJ,CAAC,CAAA,CAAA,CAAA,CACH,EACF,EAEAZ,EAAAA,IAAC,MAAA,CAAI,UAAU,iBACb,SAAAC,EAAAA,KAAC,SAAA,CACC,QAAS7C,EACT,UAAU,0DAEV,SAAA,CAAA4C,EAAAA,IAACa,GAAA,CAAM,UAAU,cAAA,CAAe,EAAE,iBAAA,CAAA,CAAA,CAEpC,CACF,CAAA,EACF,EAGCvE,GACC2D,EAAAA,KAAC,MAAA,CAAI,UAAU,4BACb,SAAA,CAAAD,EAAAA,IAAC,KAAA,CAAG,UAAU,2CAA2C,SAAA,wBAAqB,EAC9EC,EAAAA,KAAC,MAAA,CAAI,UAAU,wCACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAD,EAAAA,IAAC,MAAA,CAAI,UAAU,mCAAoC,SAAA1D,EAAiB,iBAAiB,EACrF0D,EAAAA,IAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,cAAA,CAAY,CAAA,EACrD,EACAC,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oCAAqC,SAAA,CAAA3D,EAAiB,kBAAkB,QAAQ,CAAC,EAAE,GAAA,EAAC,EACnG0D,EAAAA,IAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,eAAA,CAAa,CAAA,EACtD,EACAC,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,qCAAsC,SAAA,CAAA3D,EAAiB,mBAAmB,QAAQ,CAAC,EAAE,GAAA,EAAC,EACrG0D,EAAAA,IAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,gBAAA,CAAc,CAAA,EACvD,EACAC,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,mCAAoC,SAAA,CAAA3D,EAAiB,gBAAgB,QAAQ,CAAC,EAAE,GAAA,EAAC,EAChG0D,EAAAA,IAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,aAAA,CAAW,CAAA,EACpD,EACAC,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,qCAAsC,SAAA,CAAA3D,EAAiB,WAAW,QAAQ,CAAC,EAAE,GAAA,EAAC,EAC7F0D,EAAAA,IAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,aAAA,CAAW,CAAA,CAAA,CACpD,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EAEJ,EAGAC,EAAAA,KAAC,MAAA,CAAI,UAAU,uDACb,SAAA,CAAAD,MAAC,MAAA,CACC,SAAAA,EAAAA,IAAC,QAAA,CACC,KAAK,OACL,YAAY,oBACZ,MAAOpE,EACP,SAAW4E,GAAM3E,EAAc2E,EAAE,OAAO,KAAK,EAC7C,UAAU,cAAA,CAAA,EAEd,EACAP,EAAAA,KAAC,SAAA,CACC,MAAOnE,EACP,SAAW0E,GAAMzE,EAAgByE,EAAE,OAAO,KAAK,EAC/C,UAAU,eAEV,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,aAAU,EAC3BA,EAAAA,IAAC,SAAA,CAAO,MAAM,UAAU,SAAA,UAAO,EAC/BA,EAAAA,IAAC,SAAA,CAAO,MAAM,YAAY,SAAA,YAAS,EACnCA,EAAAA,IAAC,SAAA,CAAO,MAAM,OAAO,SAAA,OAAI,EACzBA,EAAAA,IAAC,SAAA,CAAO,MAAM,YAAY,SAAA,WAAA,CAAS,CAAA,CAAA,CAAA,EAErCC,EAAAA,KAAC,SAAA,CACC,MAAOjE,EACP,SAAWwE,GAAMvE,EAAeuE,EAAE,OAAO,KAAK,EAC9C,UAAU,eAEV,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,aAAU,EAC1B,MAAM,KAAK,CAAE,OAAQ,IAAM,CAACU,EAAGC,IAC9BX,EAAAA,IAAC,UAAmB,MAAOW,EAAI,EAC5B,SAAAb,EAAaa,EAAI,CAAC,CAAA,EADRA,EAAI,CAEjB,CACD,CAAA,CAAA,CAAA,EAEHV,EAAAA,KAAC,SAAA,CACC,MAAO/D,EACP,SAAWsE,GAAMrE,EAAcqE,EAAE,OAAO,KAAK,EAC7C,UAAU,eAEV,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,YAAS,EACzB,MAAM,KAAK,CAAE,OAAQ,GAAK,CAACU,EAAGC,IAAM,CACnC,MAAMC,EAAO,IAAI,KAAA,EAAO,cAAgBD,EACxC,OACEX,EAAAA,IAAC,SAAA,CAAkB,MAAOY,EACvB,YADUA,CAEb,CAEJ,CAAC,CAAA,CAAA,CAAA,EAEHZ,EAAAA,IAAC,SAAA,CACC,QAAS,IAAM,CACbnE,EAAc,EAAE,EAChBE,EAAgB,EAAE,EAClBE,EAAe,EAAE,EACjBE,EAAc,EAAE,CAClB,EACA,UAAU,kBACX,SAAA,eAAA,CAAA,CAED,EACF,EAGA6D,EAAAA,IAAC,MAAA,CAAI,UAAU,uBACb,SAAAA,EAAAA,IAAC,MAAA,CAAI,UAAU,kBACb,SAAAC,OAAC,QAAA,CAAM,UAAU,SACf,SAAA,CAAAD,MAAC,QAAA,CAAM,UAAU,aACf,SAAAC,EAAAA,KAAC,KAAA,CACC,SAAA,CAAAD,EAAAA,IAAC,KAAA,CAAG,UAAU,iFAAiF,SAAA,WAE/F,EACAA,EAAAA,IAAC,KAAA,CAAG,UAAU,iFAAiF,SAAA,SAE/F,EACAA,EAAAA,IAAC,KAAA,CAAG,UAAU,iFAAiF,SAAA,eAE/F,EACAA,EAAAA,IAAC,KAAA,CAAG,UAAU,iFAAiF,SAAA,WAE/F,EACAA,EAAAA,IAAC,KAAA,CAAG,UAAU,iFAAiF,SAAA,aAE/F,EACAA,EAAAA,IAAC,KAAA,CAAG,UAAU,iFAAiF,SAAA,SAE/F,EACAA,EAAAA,IAAC,KAAA,CAAG,UAAU,iFAAiF,SAAA,SAAA,CAE/F,CAAA,CAAA,CACF,CAAA,CACF,EACAA,EAAAA,IAAC,QAAA,CAAM,UAAU,oCACd,UAAAc,EAAAjD,GAAA,YAAAA,EAAa,KAAK,WAAlB,YAAAiD,EAA4B,IAAK3B,GAAA,WAChCc,OAAAA,OAAC,KAAA,CAAoB,UAAU,mBAC7B,SAAA,CAAAD,EAAAA,IAAC,MAAG,UAAU,8BACZ,SAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAD,EAAAA,IAAC,MAAA,CAAI,UAAU,0BACb,SAAAA,EAAAA,IAAC,MAAA,CAAI,UAAU,sEACb,SAAAA,EAAAA,IAACe,GAAA,CAAK,UAAU,uBAAA,CAAwB,CAAA,CAC1C,EACF,EACAd,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACZ,SAAA,EAAAzB,EAAAW,EAAQ,WAAR,YAAAX,EAAkB,KAAK,UAAU,KAAED,EAAAY,EAAQ,WAAR,YAAAZ,EAAkB,KAAK,QAAA,EAC7D,QACC,MAAA,CAAI,UAAU,wBACZ,UAAAuC,EAAA3B,EAAQ,WAAR,YAAA2B,EAAkB,UAAA,CACrB,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,EACAb,EAAAA,KAAC,KAAA,CAAG,UAAU,oDACX,SAAA,CAAAH,EAAaX,EAAQ,KAAK,EAAE,IAAEA,EAAQ,IAAA,EACzC,QACC,KAAA,CAAG,UAAU,oDACX,SAAAO,EAAeP,EAAQ,WAAW,EACrC,QACC,KAAA,CAAG,UAAU,oDACX,SAAAO,EAAeP,EAAQ,WAAW,EACrC,QACC,KAAA,CAAG,UAAU,gEACX,SAAAO,EAAeP,EAAQ,SAAS,EACnC,EACAa,MAAC,KAAA,CAAG,UAAU,8BACZ,eAAC,OAAA,CAAK,UAAW,8CAA8CJ,GAAeT,EAAQ,MAAM,CAAC,GAC1F,SAAAA,EAAQ,OACX,EACF,QACC,KAAA,CAAG,UAAU,kDACZ,SAAAc,EAAAA,KAAC,MAAA,CAAI,UAAU,iBACb,SAAA,CAAAD,EAAAA,IAAC,SAAA,CACC,QAAS,IAAMrE,EAAkBwD,CAAO,EACxC,UAAU,oCAEV,SAAAa,EAAAA,IAACgB,GAAA,CAAK,UAAU,SAAA,CAAU,CAAA,CAAA,EAE3B7B,EAAQ,SAAW,QAClBa,EAAAA,IAAC,SAAA,CACC,QAAS,IAAMd,GAAqBC,CAAO,EAC3C,UAAU,sCACV,MAAM,kBAEN,SAAAa,EAAAA,IAACG,EAAA,CAAW,UAAU,SAAA,CAAU,CAAA,CAAA,EAGpCH,EAAAA,IAAC,QAAA,CACC,KAAK,WACL,QAASlD,EAAiB,SAASqC,EAAQ,EAAE,EAC7C,SAAWqB,GAAMjB,GAAoBJ,EAAQ,GAAIqB,EAAE,OAAO,OAAO,EACjE,UAAU,yBAAA,CAAA,EAEZR,EAAAA,IAAC,SAAA,CACC,QAAS,IAAMf,GAAoBE,EAAQ,EAAE,EAC7C,UAAU,kCAEV,SAAAa,EAAAA,IAACiB,GAAA,CAAO,UAAU,SAAA,CAAU,CAAA,CAAA,CAC9B,CAAA,CACF,CAAA,CACF,CAAA,GAjEO9B,EAAQ,EAkEjB,GACD,CACH,CAAA,CAAA,CACF,EACF,EACF,EAGC5D,GACCyE,EAAAA,IAACkB,GAAA,CACC,WAAWjD,GAAA,YAAAA,EAAe,KAAK,YAAa,CAAA,EAC5C,QAAS,IAAMzC,EAAmB,EAAK,EACvC,SAAUuD,GACV,UAAWX,EAAsB,SAAA,CAAA,EAKpC1C,GACCsE,EAAAA,IAACmB,GAAA,CACC,QAASzF,EACT,QAAS,IAAMC,EAAkB,IAAI,EACrC,SAAUqD,GACV,UAAWP,EAAsB,SAAA,CAAA,EAKpCjC,GAAoBI,GACnBoD,EAAAA,IAACoB,GAAA,CACC,QAASxE,EACT,YAAAI,EACA,eAAAC,EACA,QAAS,IAAM,CACbR,EAAoB,EAAK,EACzBI,EAAmB,IAAI,CACzB,EACA,SAAUwC,GACV,UAAWR,EAAuB,SAAA,CAAA,EAKrCnC,GACCsD,EAAAA,IAACqB,GAAA,CACC,cAAevE,EAAiB,OAChC,YAAAE,EACA,eAAAC,EACA,QAAS,IAAM,CACbN,EAAwB,EAAK,EAC7BI,EAAoB,CAAA,CAAE,CACxB,EACA,SAAUuC,GACV,UAAWR,EAAoB,SAAA,CAAA,CACjC,EAEJ,CAEJ,EAGMoC,GAKD,CAAC,CAAE,UAAAI,EAAW,QAAAC,EAAS,SAAAC,EAAU,UAAAC,KAAgB,CACpD,KAAM,CAACC,EAAUC,CAAW,EAAIlG,WAA4B,CAC1D,WAAY,GACZ,MAAO,IAAI,OAAO,WAAa,EAC/B,KAAM,IAAI,KAAA,EAAO,YAAA,EACjB,YAAa,EACb,YAAa,EACb,WAAY,EACZ,WAAY,CAAA,CACb,EAEKmG,EAAgBpB,GAAuB,CAC3CA,EAAE,eAAA,EACFgB,EAASE,CAAQ,CACnB,EAEM5B,EAAgBC,GACL,CACb,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,UAAA,EAE1CA,EAAQ,CAAC,EAGzB,aACG,MAAA,CAAI,UAAU,iFACb,SAAAE,EAAAA,KAAC,MAAA,CAAI,UAAU,0CACb,SAAA,CAAAD,EAAAA,IAAC,KAAA,CAAG,UAAU,6BAA6B,SAAA,wBAAqB,EAChEC,EAAAA,KAAC,OAAA,CAAK,SAAU2B,EAAc,UAAU,YACtC,SAAA,CAAA3B,OAAC,MAAA,CACC,SAAA,CAAAD,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,WAAQ,EACjCC,EAAAA,KAAC,SAAA,CACC,MAAOyB,EAAS,WAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,WAAYlB,EAAE,OAAO,MAAO,EACxE,UAAU,QACV,SAAQ,GAER,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,GAAG,SAAA,kBAAe,EAC/BsB,EAAU,IAAKb,UACb,SAAA,CAAyB,MAAOA,EAAS,GACvC,SAAA,CAAAA,EAAS,KAAK,UAAU,IAAEA,EAAS,KAAK,SAAS,MAAIA,EAAS,UAAA,CAAA,EADpDA,EAAS,EAEtB,CACD,CAAA,CAAA,CAAA,CACH,EACF,EACAR,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAA,OAAC,MAAA,CACC,SAAA,CAAAD,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,QAAK,EAC9BA,EAAAA,IAAC,SAAA,CACC,MAAO0B,EAAS,MAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,MAAO,OAAOlB,EAAE,OAAO,KAAK,EAAG,EAC3E,UAAU,QACV,SAAQ,GAEP,SAAA,MAAM,KAAK,CAAE,OAAQ,IAAM,CAACE,EAAGC,IAC9BX,MAAC,UAAmB,MAAOW,EAAI,EAC5B,SAAAb,EAAaa,EAAI,CAAC,CAAA,EADRA,EAAI,CAEjB,CACD,CAAA,CAAA,CACH,EACF,SACC,MAAA,CACC,SAAA,CAAAX,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,OAAI,EAC7BA,EAAAA,IAAC,SAAA,CACC,MAAO0B,EAAS,KAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,KAAM,OAAOlB,EAAE,OAAO,KAAK,EAAG,EAC1E,UAAU,QACV,SAAQ,GAEP,SAAA,MAAM,KAAK,CAAE,OAAQ,GAAK,CAACE,EAAGC,IAAM,CACnC,MAAMC,EAAO,IAAI,KAAA,EAAO,cAAgBD,EACxC,OACEX,EAAAA,IAAC,SAAA,CAAkB,MAAOY,EACvB,YADUA,CAEb,CAEJ,CAAC,CAAA,CAAA,CACH,CAAA,CACF,CAAA,EACF,SACC,MAAA,CACC,SAAA,CAAAZ,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,eAAY,EACrCA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAO0B,EAAS,YAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,YAAa,OAAOlB,EAAE,OAAO,KAAK,EAAG,EACjF,UAAU,QACV,IAAI,IACJ,KAAK,OACL,SAAQ,EAAA,CAAA,CACV,EACF,SACC,MAAA,CACC,SAAA,CAAAR,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,eAAY,EACrCA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAO0B,EAAS,YAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,YAAa,OAAOlB,EAAE,OAAO,KAAK,EAAG,EACjF,UAAU,QACV,IAAI,IACJ,KAAK,MAAA,CAAA,CACP,EACF,SACC,MAAA,CACC,SAAA,CAAAR,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,aAAU,EACnCA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAO0B,EAAS,WAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,WAAY,OAAOlB,EAAE,OAAO,KAAK,EAAG,EAChF,UAAU,QACV,IAAI,IACJ,KAAK,MAAA,CAAA,CACP,EACF,SACC,MAAA,CACC,SAAA,CAAAR,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,aAAU,EACnCA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAO0B,EAAS,WAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,WAAY,OAAOlB,EAAE,OAAO,KAAK,EAAG,EAChF,UAAU,QACV,IAAI,IACJ,KAAK,MAAA,CAAA,CACP,EACF,EACAP,EAAAA,KAAC,MAAA,CAAI,UAAU,6BACb,SAAA,CAAAD,EAAAA,IAAC,UAAO,KAAK,SAAS,QAASuB,EAAS,UAAU,oBAAoB,SAAA,QAAA,CAEtE,EACAvB,EAAAA,IAAC,SAAA,CAAO,KAAK,SAAS,UAAU,kBAAkB,SAAUyB,EACzD,SAAAA,EAAY,cAAgB,gBAAA,CAC/B,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAEJ,EAGMN,GAKD,CAAC,CAAE,QAAAhC,EAAS,QAAAoC,EAAS,SAAAC,EAAU,UAAAC,KAAgB,CAClD,KAAM,CAACC,EAAUC,CAAW,EAAIlG,WAAqC,CACnE,YAAa0D,EAAQ,YACrB,YAAaA,EAAQ,YACrB,WAAYA,EAAQ,WACpB,WAAYA,EAAQ,UAAA,CACrB,EAEKyC,EAAgBpB,GAAuB,CAC3CA,EAAE,eAAA,EACFgB,EAASE,CAAQ,CACnB,EAEA,aACG,MAAA,CAAI,UAAU,iFACb,SAAAzB,EAAAA,KAAC,MAAA,CAAI,UAAU,0CACb,SAAA,CAAAD,EAAAA,IAAC,KAAA,CAAG,UAAU,6BAA6B,SAAA,sBAAmB,EAC9DC,EAAAA,KAAC,OAAA,CAAK,SAAU2B,EAAc,UAAU,YACtC,SAAA,CAAA3B,OAAC,MAAA,CACC,SAAA,CAAAD,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,eAAY,EACrCA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAO0B,EAAS,YAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,YAAa,OAAOlB,EAAE,OAAO,KAAK,EAAG,EACjF,UAAU,QACV,IAAI,IACJ,KAAK,OACL,SAAQ,EAAA,CAAA,CACV,EACF,SACC,MAAA,CACC,SAAA,CAAAR,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,eAAY,EACrCA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAO0B,EAAS,YAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,YAAa,OAAOlB,EAAE,OAAO,KAAK,EAAG,EACjF,UAAU,QACV,IAAI,IACJ,KAAK,MAAA,CAAA,CACP,EACF,SACC,MAAA,CACC,SAAA,CAAAR,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,aAAU,EACnCA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAO0B,EAAS,WAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,WAAY,OAAOlB,EAAE,OAAO,KAAK,EAAG,EAChF,UAAU,QACV,IAAI,IACJ,KAAK,MAAA,CAAA,CACP,EACF,SACC,MAAA,CACC,SAAA,CAAAR,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,aAAU,EACnCA,EAAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAO0B,EAAS,WAChB,SAAWlB,GAAMmB,EAAY,CAAE,GAAGD,EAAU,WAAY,OAAOlB,EAAE,OAAO,KAAK,EAAG,EAChF,UAAU,QACV,IAAI,IACJ,KAAK,MAAA,CAAA,CACP,EACF,EACAP,EAAAA,KAAC,MAAA,CAAI,UAAU,6BACb,SAAA,CAAAD,EAAAA,IAAC,UAAO,KAAK,SAAS,QAASuB,EAAS,UAAU,oBAAoB,SAAA,QAAA,CAEtE,EACAvB,EAAAA,IAAC,SAAA,CAAO,KAAK,SAAS,UAAU,kBAAkB,SAAUyB,EACzD,SAAAA,EAAY,cAAgB,gBAAA,CAC/B,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAEJ,EAGML,GAOD,CAAC,CAAE,QAAAjC,EAAS,YAAAnC,EAAa,eAAAC,EAAgB,QAAAsE,EAAS,SAAAC,EAAU,UAAAC,KAAgB,aAC/E,MAAMG,EAAgBpB,GAAuB,CAC3CA,EAAE,eAAA,EACFgB,EAAA,CACF,EAEA,aACG,MAAA,CAAI,UAAU,iFACb,SAAAvB,EAAAA,KAAC,MAAA,CAAI,UAAU,0CACb,SAAA,CAAAD,EAAAA,IAAC,KAAA,CAAG,UAAU,6BAA6B,SAAA,yBAAsB,EACjEC,EAAAA,KAAC,MAAA,CAAI,UAAU,iCACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,CAAA,cAAW1B,GAAAC,EAAAW,EAAQ,WAAR,YAAAX,EAAkB,OAAlB,YAAAD,EAAwB,UAAU,KAAEsD,GAAAf,EAAA3B,EAAQ,WAAR,YAAA2B,EAAkB,OAAlB,YAAAe,EAAwB,QAAA,EAAS,EACvH5B,EAAAA,KAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,CAAA,WAAS,IAAI,KAAK,aAAa,QAAS,CAAE,MAAO,WAAY,SAAU,KAAA,CAAO,EAAE,OAAOd,EAAQ,SAAS,CAAA,EAAE,EACjJc,EAAAA,KAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,CAAA,UAAQd,EAAQ,MAAM,IAAEA,EAAQ,IAAA,CAAA,CAAK,CAAA,EAC9E,EAEAc,EAAAA,KAAC,OAAA,CAAK,SAAU2B,EAAc,UAAU,YACtC,SAAA,CAAA3B,OAAC,MAAA,CACC,SAAA,CAAAD,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,iBAAc,EACvCC,EAAAA,KAAC,SAAA,CACC,MAAOjD,EAAY,cACnB,SAAWwD,GAAMvD,EAAe,CAAC,GAAGD,EAAa,cAAewD,EAAE,OAAO,MAAM,EAC/E,UAAU,QACV,SAAQ,GAER,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,gBAAgB,SAAA,gBAAa,EAC3CA,EAAAA,IAAC,SAAA,CAAO,MAAM,OAAO,SAAA,OAAI,EACzBA,EAAAA,IAAC,SAAA,CAAO,MAAM,QAAQ,SAAA,QAAK,EAC3BA,EAAAA,IAAC,SAAA,CAAO,MAAM,eAAe,SAAA,eAAY,EACzCA,EAAAA,IAAC,SAAA,CAAO,MAAM,iBAAiB,SAAA,iBAAc,EAC7CA,EAAAA,IAAC,SAAA,CAAO,MAAM,QAAQ,SAAA,OAAA,CAAK,CAAA,CAAA,CAAA,CAC7B,EACF,SAEC,MAAA,CACC,SAAA,CAAAA,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,oBAAiB,EAC1CA,EAAAA,IAAC,QAAA,CACC,KAAK,OACL,MAAOhD,EAAY,iBACnB,SAAWwD,GAAMvD,EAAe,CAAC,GAAGD,EAAa,iBAAkBwD,EAAE,OAAO,MAAM,EAClF,UAAU,QACV,YAAY,oCAAA,CAAA,CACd,EACF,SAEC,MAAA,CACC,SAAA,CAAAR,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,gBAAa,EACtCA,EAAAA,IAAC,WAAA,CACC,MAAOhD,EAAY,aACnB,SAAWwD,GAAMvD,EAAe,CAAC,GAAGD,EAAa,aAAcwD,EAAE,OAAO,MAAM,EAC9E,UAAU,QACV,KAAM,EACN,YAAY,6BAAA,CAAA,CACd,EACF,EAEAP,EAAAA,KAAC,MAAA,CAAI,UAAU,6BACb,SAAA,CAAAD,EAAAA,IAAC,SAAA,CACC,KAAK,SACL,QAASuB,EACT,UAAU,kBACV,SAAUE,EACX,SAAA,QAAA,CAAA,EAGDzB,EAAAA,IAAC,SAAA,CACC,KAAK,SACL,UAAU,kBACV,SAAUyB,EAET,WAAY,gBAAkB,iBAAA,CAAA,CACjC,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAEJ,EAGMJ,GAOD,CAAC,CAAE,cAAAS,EAAe,YAAA9E,EAAa,eAAAC,EAAgB,QAAAsE,EAAS,SAAAC,EAAU,UAAAC,KAAgB,CACrF,MAAMG,EAAgBpB,GAAuB,CAC3CA,EAAE,eAAA,EACFgB,EAAA,CACF,EAEA,aACG,MAAA,CAAI,UAAU,iFACb,SAAAvB,EAAAA,KAAC,MAAA,CAAI,UAAU,0CACb,SAAA,CAAAD,EAAAA,IAAC,KAAA,CAAG,UAAU,6BAA6B,SAAA,sBAAmB,QAC7D,MAAA,CAAI,UAAU,iCACb,SAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,wBAAwB,SAAA,CAAA,0BAAwB6B,EAAc,YAAA,CAAA,CAAU,CAAA,CACzF,EAEA7B,EAAAA,KAAC,OAAA,CAAK,SAAU2B,EAAc,UAAU,YACtC,SAAA,CAAA3B,OAAC,MAAA,CACC,SAAA,CAAAD,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,iBAAc,EACvCC,EAAAA,KAAC,SAAA,CACC,MAAOjD,EAAY,cACnB,SAAWwD,GAAMvD,EAAe,CAAC,GAAGD,EAAa,cAAewD,EAAE,OAAO,MAAM,EAC/E,UAAU,QACV,SAAQ,GAER,SAAA,CAAAR,EAAAA,IAAC,SAAA,CAAO,MAAM,gBAAgB,SAAA,gBAAa,EAC3CA,EAAAA,IAAC,SAAA,CAAO,MAAM,OAAO,SAAA,OAAI,EACzBA,EAAAA,IAAC,SAAA,CAAO,MAAM,QAAQ,SAAA,QAAK,EAC3BA,EAAAA,IAAC,SAAA,CAAO,MAAM,eAAe,SAAA,eAAY,EACzCA,EAAAA,IAAC,SAAA,CAAO,MAAM,iBAAiB,SAAA,iBAAc,EAC7CA,EAAAA,IAAC,SAAA,CAAO,MAAM,QAAQ,SAAA,OAAA,CAAK,CAAA,CAAA,CAAA,CAC7B,EACF,SAEC,MAAA,CACC,SAAA,CAAAA,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,oBAAiB,EAC1CA,EAAAA,IAAC,QAAA,CACC,KAAK,OACL,MAAOhD,EAAY,iBACnB,SAAWwD,GAAMvD,EAAe,CAAC,GAAGD,EAAa,iBAAkBwD,EAAE,OAAO,MAAM,EAClF,UAAU,QACV,YAAY,uCAAA,CAAA,CACd,EACF,SAEC,MAAA,CACC,SAAA,CAAAR,EAAAA,IAAC,QAAA,CAAM,UAAU,QAAQ,SAAA,gBAAa,EACtCA,EAAAA,IAAC,WAAA,CACC,MAAOhD,EAAY,aACnB,SAAWwD,GAAMvD,EAAe,CAAC,GAAGD,EAAa,aAAcwD,EAAE,OAAO,MAAM,EAC9E,UAAU,QACV,KAAM,EACN,YAAY,2BAAA,CAAA,CACd,EACF,EAEAP,EAAAA,KAAC,MAAA,CAAI,UAAU,6BACb,SAAA,CAAAD,EAAAA,IAAC,SAAA,CACC,KAAK,SACL,QAASuB,EACT,UAAU,kBACV,SAAUE,EACX,SAAA,QAAA,CAAA,EAGDzB,EAAAA,IAAC,SAAA,CACC,KAAK,SACL,UAAU,kBACV,SAAUyB,EAET,SAAAA,EAAY,gBAAkB,WAAWK,CAAa,WAAA,CAAA,CACzD,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAEJ"}