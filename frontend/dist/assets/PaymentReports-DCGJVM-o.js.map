{"version":3,"file":"PaymentReports-DCGJVM-o.js","sources":["../../src/pages/PaymentReports.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { \n  BarChart3, \n  TrendingUp, \n  DollarSign, \n  Users, \n  Calendar, \n  Download,\n  CreditCard,\n  Banknote,\n  Smartphone,\n  FileText,\n  Coins,\n  MoreHorizontal,\n  PieChart,\n  LineChart,\n  Activity\n} from 'lucide-react'\nimport { payrollService } from '../services/payrollService'\nimport { employeeService } from '../services/employeeService'\nimport toast from 'react-hot-toast'\n\nconst PaymentReports: React.FC = () => {\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear())\n  const [selectedMonth, setSelectedMonth] = useState('')\n  const [selectedEmployee, setSelectedEmployee] = useState('all')\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('all')\n  const [reportType, setReportType] = useState('summary')\n\n  // Fetch payment statistics\n  const { data: paymentStats } = useQuery(\n    ['payment-stats', selectedYear, selectedMonth],\n    () => payrollService.getPaymentStats({\n      year: selectedYear,\n      month: selectedMonth ? Number(selectedMonth) : undefined\n    })\n  )\n\n  // Fetch employees for filtering\n  const { data: employeesData } = useQuery(\n    'employees',\n    () => employeeService.getEmployees({ page: 1, limit: 1000 })\n  )\n\n  // Fetch detailed payment data\n  const { data: paymentData, isLoading: dataLoading } = useQuery(\n    ['payment-data', selectedYear, selectedMonth, selectedEmployee, selectedPaymentMethod],\n    () => payrollService.getPayrolls({\n      year: selectedYear,\n      month: selectedMonth ? Number(selectedMonth) : undefined,\n      status: 'PAID',\n      limit: 1000\n    })\n  )\n\n  // Generate monthly payment data for charts\n  const generateMonthlyData = () => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    const data: Array<{ month: string; amount: number; count: number }> = []\n    \n    for (let i = 0; i < 12; i++) {\n      const monthData = paymentData?.data?.payrolls?.filter((payroll: any) => {\n        const payrollDate = new Date(payroll.paidAt || payroll.createdAt)\n        return payrollDate.getMonth() === i && payrollDate.getFullYear() === selectedYear\n      }) || []\n      \n      data.push({\n        month: months[i],\n        amount: monthData.reduce((sum: number, payroll: any) => sum + Number(payroll.netSalary), 0),\n        count: monthData.length\n      })\n    }\n    \n    return data\n  }\n\n  // Generate payment method data\n  const generatePaymentMethodData = () => {\n    const methods = ['BANK_TRANSFER', 'CASH', 'CHECK', 'MOBILE_MONEY', 'CRYPTOCURRENCY', 'OTHER']\n    const data: Array<{ method: string; amount: number; count: number; percentage: number }> = []\n    \n    methods.forEach(method => {\n      const methodData = paymentData?.data?.payrolls?.filter((payroll: any) => \n        payroll.paymentMethod === method\n      ) || []\n      \n      data.push({\n        method: method.replace('_', ' '),\n        amount: methodData.reduce((sum: number, payroll: any) => sum + Number(payroll.netSalary), 0),\n        count: methodData.length,\n        percentage: paymentData?.data?.payrolls?.length ? \n          (methodData.length / paymentData.data.payrolls.length) * 100 : 0\n      })\n    })\n    \n    return data.filter(item => item.count > 0)\n  }\n\n  // Generate department payment data\n  const generateDepartmentData = () => {\n    const departments = [...new Set(paymentData?.data?.payrolls?.map((payroll: any) => \n      payroll.employee?.department || 'Unknown'\n    ) || [])]\n    \n    return departments.map(dept => {\n      const deptData = paymentData?.data?.payrolls?.filter((payroll: any) => \n        (payroll.employee?.department || 'Unknown') === dept\n      ) || []\n      \n      return {\n        department: dept,\n        amount: deptData.reduce((sum: number, payroll: any) => sum + Number(payroll.netSalary), 0),\n        count: deptData.length,\n        average: deptData.length > 0 ? \n          deptData.reduce((sum: number, payroll: any) => sum + Number(payroll.netSalary), 0) / deptData.length : 0\n      }\n    }).sort((a, b) => b.amount - a.amount)\n  }\n\n  // Get payment method icon\n  const getPaymentMethodIcon = (method: string) => {\n    switch (method) {\n      case 'BANK_TRANSFER': return <CreditCard className=\"w-4 h-4\" />\n      case 'CASH': return <Banknote className=\"w-4 h-4\" />\n      case 'CHECK': return <FileText className=\"w-4 h-4\" />\n      case 'MOBILE_MONEY': return <Smartphone className=\"w-4 h-4\" />\n      case 'CRYPTOCURRENCY': return <Coins className=\"w-4 h-4\" />\n      default: return <MoreHorizontal className=\"w-4 h-4\" />\n    }\n  }\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR'\n    }).format(amount)\n  }\n\n  // Export data to CSV\n  const exportToCSV = () => {\n    if (!paymentData?.data?.payrolls) {\n      toast.error('No data to export')\n      return\n    }\n\n    const csvData = paymentData.data.payrolls.map((payroll: any) => ({\n      'Employee Name': `${payroll.employee?.user?.firstName} ${payroll.employee?.user?.lastName}`,\n      'Employee ID': payroll.employee?.employeeId,\n      'Department': payroll.employee?.department || 'N/A',\n      'Month': payroll.month,\n      'Year': payroll.year,\n      'Basic Salary': payroll.basicSalary,\n      'Overtime Pay': payroll.overtimePay,\n      'Allowances': payroll.allowances,\n      'Deductions': payroll.deductions,\n      'Net Salary': payroll.netSalary,\n      'Payment Method': payroll.paymentMethod || 'N/A',\n      'Payment Reference': payroll.paymentReference || 'N/A',\n      'Paid Date': payroll.paidAt ? new Date(payroll.paidAt).toLocaleDateString() : 'N/A',\n      'Status': payroll.status\n    }))\n\n    const csvContent = [\n      Object.keys(csvData[0]).join(','),\n      ...csvData.map(row => Object.values(row).join(','))\n    ].join('\\n')\n\n    const blob = new Blob([csvContent], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `payment-report-${selectedYear}${selectedMonth ? `-${selectedMonth}` : ''}.csv`\n    a.click()\n    window.URL.revokeObjectURL(url)\n    \n    toast.success('Payment report exported successfully!')\n  }\n\n  const monthlyData = generateMonthlyData()\n  const paymentMethodData = generatePaymentMethodData()\n  const departmentData = generateDepartmentData()\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-green-700 rounded-lg shadow-lg p-6 text-white\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Payment Reports</h1>\n            <p className=\"text-green-100 mt-2\">Comprehensive salary payment analytics and insights</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <button\n              onClick={exportToCSV}\n              className=\"bg-white text-green-600 px-6 py-3 rounded-lg font-semibold hover:bg-green-50 transition-colors flex items-center gap-2\"\n            >\n              <Download className=\"h-5 w-5\" />\n              Export CSV\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <div>\n            <label className=\"label\">Year</label>\n            <select\n              value={selectedYear}\n              onChange={(e) => setSelectedYear(Number(e.target.value))}\n              className=\"input\"\n            >\n              {Array.from({ length: 5 }, (_, i) => new Date().getFullYear() - i).map(year => (\n                <option key={year} value={year}>{year}</option>\n              ))}\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"label\">Month</label>\n            <select\n              value={selectedMonth}\n              onChange={(e) => setSelectedMonth(e.target.value)}\n              className=\"input\"\n            >\n              <option value=\"\">All Months</option>\n              {Array.from({ length: 12 }, (_, i) => i + 1).map(month => (\n                <option key={month} value={month}>\n                  {new Date(0, month - 1).toLocaleString('default', { month: 'long' })}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"label\">Employee</label>\n            <select\n              value={selectedEmployee}\n              onChange={(e) => setSelectedEmployee(e.target.value)}\n              className=\"input\"\n            >\n              <option value=\"all\">All Employees</option>\n              {employeesData?.data?.employees?.map((employee: any) => (\n                <option key={employee.id} value={employee.id}>\n                  {employee.user.firstName} {employee.user.lastName}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"label\">Payment Method</label>\n            <select\n              value={selectedPaymentMethod}\n              onChange={(e) => setSelectedPaymentMethod(e.target.value)}\n              className=\"input\"\n            >\n              <option value=\"all\">All Methods</option>\n              <option value=\"BANK_TRANSFER\">Bank Transfer</option>\n              <option value=\"CASH\">Cash</option>\n              <option value=\"CHECK\">Check</option>\n              <option value=\"MOBILE_MONEY\">Mobile Money</option>\n              <option value=\"CRYPTOCURRENCY\">Cryptocurrency</option>\n              <option value=\"OTHER\">Other</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"label\">Report Type</label>\n            <select\n              value={reportType}\n              onChange={(e) => setReportType(e.target.value)}\n              className=\"input\"\n            >\n              <option value=\"summary\">Summary</option>\n              <option value=\"detailed\">Detailed</option>\n              <option value=\"analytics\">Analytics</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Payment Statistics Cards */}\n      {paymentStats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Payments</p>\n                <p className=\"text-2xl font-bold text-blue-600\">{paymentStats.totalPayrolls}</p>\n              </div>\n              <div className=\"p-3 bg-blue-100 rounded-full\">\n                <BarChart3 className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Paid Amount</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {formatCurrency(Number(paymentStats.totalAmountPaid))}\n                </p>\n              </div>\n              <div className=\"p-3 bg-green-100 rounded-full\">\n                <DollarSign className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Pending Amount</p>\n                <p className=\"text-2xl font-bold text-orange-600\">\n                  {formatCurrency(Number(paymentStats.totalAmountPending))}\n                </p>\n              </div>\n              <div className=\"p-3 bg-orange-100 rounded-full\">\n                <Activity className=\"h-6 w-6 text-orange-600\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Payment Rate</p>\n                <p className=\"text-2xl font-bold text-purple-600\">\n                  {paymentStats.paymentRate.toFixed(1)}%\n                </p>\n              </div>\n              <div className=\"p-3 bg-purple-100 rounded-full\">\n                <TrendingUp className=\"h-6 w-6 text-purple-600\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Monthly Payment Trends */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n            <LineChart className=\"w-5 h-5\" />\n            Monthly Payment Trends\n          </h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Amount Chart */}\n            <div>\n              <h4 className=\"text-md font-medium text-gray-700 mb-4\">Payment Amounts by Month</h4>\n              <div className=\"space-y-3\">\n                {monthlyData.map((data, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-gray-600\">{data.month}</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-600 h-2 rounded-full\"\n                          style={{ \n                            width: `${Math.max(5, (data.amount / Math.max(...monthlyData.map(d => d.amount))) * 100)}%` \n                          }}\n                        ></div>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900 w-20 text-right\">\n                        {formatCurrency(data.amount)}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Count Chart */}\n            <div>\n              <h4 className=\"text-md font-medium text-gray-700 mb-4\">Payment Counts by Month</h4>\n              <div className=\"space-y-3\">\n                {monthlyData.map((data, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-gray-600\">{data.month}</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-green-600 h-2 rounded-full\"\n                          style={{ \n                            width: `${Math.max(5, (data.count / Math.max(...monthlyData.map(d => d.count))) * 100)}%` \n                          }}\n                        ></div>\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900 w-12 text-right\">\n                        {data.count}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Payment Method Analysis */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n            <PieChart className=\"w-5 h-5\" />\n            Payment Method Analysis\n          </h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {paymentMethodData.map((data, index) => (\n              <div key={index} className=\"p-4 border rounded-lg hover:shadow-md transition-shadow\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    {getPaymentMethodIcon(data.method.replace(' ', '_'))}\n                    <span className=\"font-medium text-gray-900\">{data.method}</span>\n                  </div>\n                  <span className=\"text-sm text-gray-500\">{data.count} payments</span>\n                </div>\n                <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {formatCurrency(data.amount)}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  {data.percentage.toFixed(1)}% of total payments\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Department Analysis */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            Department Payment Analysis\n          </h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Department\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Total Amount\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Payment Count\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Average Payment\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {departmentData.map((dept, index) => (\n                  <tr key={index}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {dept.department}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {formatCurrency(dept.amount)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {dept.count}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {formatCurrency(dept.average)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      {/* Detailed Payment List */}\n      {reportType === 'detailed' && (\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              Detailed Payment Records\n            </h3>\n          </div>\n          <div className=\"p-6\">\n            {dataLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                <p className=\"text-gray-600 mt-2\">Loading payment data...</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Employee\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Amount\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Payment Method\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Reference\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Paid Date\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {paymentData?.data?.payrolls?.map((payroll: any) => (\n                      <tr key={payroll.id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {payroll.employee?.user?.firstName} {payroll.employee?.user?.lastName}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {payroll.employee?.employeeId}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          {formatCurrency(Number(payroll.netSalary))}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center gap-2\">\n                            {getPaymentMethodIcon(payroll.paymentMethod)}\n                            <span className=\"text-sm text-gray-900\">\n                              {payroll.paymentMethod?.replace('_', ' ') || 'N/A'}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {payroll.paymentReference || 'N/A'}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {payroll.paidAt ? new Date(payroll.paidAt).toLocaleDateString() : 'N/A'}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default PaymentReports\n"],"names":["PaymentReports","selectedYear","setSelectedYear","useState","selectedMonth","setSelectedMonth","selectedEmployee","setSelectedEmployee","selectedPaymentMethod","setSelectedPaymentMethod","reportType","setReportType","paymentStats","useQuery","payrollService","employeesData","employeeService","paymentData","dataLoading","generateMonthlyData","months","data","i","monthData","_b","_a","payroll","payrollDate","sum","generatePaymentMethodData","methods","method","methodData","_d","_c","item","generateDepartmentData","dept","deptData","a","b","getPaymentMethodIcon","jsx","CreditCard","Banknote","FileText","Smartphone","Coins","MoreHorizontal","formatCurrency","amount","exportToCSV","toast","csvData","_e","_f","csvContent","row","blob","url","monthlyData","paymentMethodData","departmentData","jsxs","Download","e","_","year","month","employee","BarChart3","DollarSign","Activity","TrendingUp","LineChart","index","d","PieChart","Users","Calendar"],"mappings":"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"}