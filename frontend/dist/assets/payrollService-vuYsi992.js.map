{"version":3,"file":"payrollService-vuYsi992.js","sources":["../../src/services/payrollService.ts"],"sourcesContent":["import api from './api'\nimport { Payroll, CreatePayrollData, PaginatedResponse } from '../types'\n\nexport const payrollService = {\n  // Get all payroll records\n  async getPayrolls(params?: {\n    page?: number\n    limit?: number\n    employeeId?: string\n    month?: number\n    year?: number\n    status?: string\n    search?: string\n  }): Promise<PaginatedResponse<Payroll>> {\n    const response = await api.get<PaginatedResponse<Payroll>>('/payroll', { params })\n    return response.data\n  },\n\n  // Get payroll by ID\n  async getPayroll(id: string): Promise<Payroll> {\n    const response = await api.get<{ success: boolean; data: { payroll: Payroll } }>(`/payroll/${id}`)\n    return response.data.data.payroll\n  },\n\n  // Create payroll record\n  async createPayroll(data: CreatePayrollData): Promise<Payroll> {\n    const response = await api.post<{ success: boolean; data: { payroll: Payroll } }>('/payroll', data)\n    return response.data.data.payroll\n  },\n\n  // Update payroll record\n  async updatePayroll(id: string, data: Partial<CreatePayrollData>): Promise<Payroll> {\n    const response = await api.put<{ success: boolean; data: { payroll: Payroll } }>(`/payroll/${id}`, data)\n    return response.data.data.payroll\n  },\n\n  // Mark payroll as paid\n  async markPayrollAsPaid(id: string): Promise<Payroll> {\n    const response = await api.put<{ success: boolean; data: { payroll: Payroll } }>(`/payroll/${id}/mark-paid`)\n    return response.data.data.payroll\n  },\n\n  // Delete payroll record\n  async deletePayroll(id: string): Promise<void> {\n    await api.delete(`/payroll/${id}`)\n  },\n\n  // Get payroll statistics\n  async getPayrollStats(params?: {\n    month?: number\n    year?: number\n  }): Promise<{\n    totalPayrolls: number\n    pendingPayrolls: number\n    processedPayrolls: number\n    paidPayrolls: number\n    totalAmount: number\n  }> {\n    const response = await api.get<{ success: boolean; data: any }>('/payroll/stats/overview', { params })\n    return response.data.data\n  },\n\n  // Get employee's payroll history\n  async getEmployeePayrollHistory(employeeId: string, params?: {\n    page?: number\n    limit?: number\n    year?: number\n  }): Promise<PaginatedResponse<Payroll>> {\n    const response = await api.get<PaginatedResponse<Payroll>>(`/payroll/employee/${employeeId}`, { params })\n    return response.data\n  },\n\n  // Process salary payment with payment details\n  async processPayment(id: string, paymentData: {\n    paymentMethod: string\n    paymentReference?: string\n    paymentNotes?: string\n  }): Promise<Payroll> {\n    const response = await api.put<{ success: boolean; data: { payroll: Payroll } }>(`/payroll/${id}/process-payment`, paymentData)\n    return response.data.data.payroll\n  },\n\n  // Bulk salary payment for multiple employees\n  async bulkPayment(paymentData: {\n    payrollIds: string[]\n    paymentMethod: string\n    paymentReference?: string\n    paymentNotes?: string\n  }): Promise<{\n    updatedCount: number\n    payrolls: Payroll[]\n  }> {\n    const response = await api.post<{ success: boolean; data: any }>('/payroll/bulk-payment', paymentData)\n    return response.data.data\n  },\n\n  // Get payment history for an employee\n  async getPaymentHistory(employeeId: string, params?: {\n    page?: number\n    limit?: number\n    year?: number\n  }): Promise<PaginatedResponse<Payroll>> {\n    const response = await api.get<PaginatedResponse<Payroll>>(`/payroll/employee/${employeeId}/payment-history`, { params })\n    return response.data\n  },\n\n  // Get payment statistics\n  async getPaymentStats(params?: {\n    year?: number\n    month?: number\n  }): Promise<{\n    totalPayrolls: number\n    paidPayrolls: number\n    pendingPayrolls: number\n    totalAmountPaid: number\n    totalAmountPending: number\n    paymentRate: number\n  }> {\n    const response = await api.get<{ success: boolean; data: any }>('/payroll/payment-stats', { params })\n    return response.data.data\n  }\n}\n\n"],"names":["payrollService","params","api","id","data","employeeId","paymentData"],"mappings":"wCAGO,MAAMA,EAAiB,CAE5B,MAAM,YAAYC,EAQsB,CAEtC,OADiB,MAAMC,EAAI,IAAgC,WAAY,CAAE,OAAAD,EAAQ,GACjE,IAClB,EAGA,MAAM,WAAWE,EAA8B,CAE7C,OADiB,MAAMD,EAAI,IAAsD,YAAYC,CAAE,EAAE,GACjF,KAAK,KAAK,OAC5B,EAGA,MAAM,cAAcC,EAA2C,CAE7D,OADiB,MAAMF,EAAI,KAAuD,WAAYE,CAAI,GAClF,KAAK,KAAK,OAC5B,EAGA,MAAM,cAAcD,EAAYC,EAAoD,CAElF,OADiB,MAAMF,EAAI,IAAsD,YAAYC,CAAE,GAAIC,CAAI,GACvF,KAAK,KAAK,OAC5B,EAGA,MAAM,kBAAkBD,EAA8B,CAEpD,OADiB,MAAMD,EAAI,IAAsD,YAAYC,CAAE,YAAY,GAC3F,KAAK,KAAK,OAC5B,EAGA,MAAM,cAAcA,EAA2B,CAC7C,MAAMD,EAAI,OAAO,YAAYC,CAAE,EAAE,CACnC,EAGA,MAAM,gBAAgBF,EASnB,CAED,OADiB,MAAMC,EAAI,IAAqC,0BAA2B,CAAE,OAAAD,EAAQ,GACrF,KAAK,IACvB,EAGA,MAAM,0BAA0BI,EAAoBJ,EAIZ,CAEtC,OADiB,MAAMC,EAAI,IAAgC,qBAAqBG,CAAU,GAAI,CAAE,OAAAJ,EAAQ,GACxF,IAClB,EAGA,MAAM,eAAeE,EAAYG,EAIZ,CAEnB,OADiB,MAAMJ,EAAI,IAAsD,YAAYC,CAAE,mBAAoBG,CAAW,GAC9G,KAAK,KAAK,OAC5B,EAGA,MAAM,YAAYA,EAQf,CAED,OADiB,MAAMJ,EAAI,KAAsC,wBAAyBI,CAAW,GACrF,KAAK,IACvB,EAGA,MAAM,kBAAkBD,EAAoBJ,EAIJ,CAEtC,OADiB,MAAMC,EAAI,IAAgC,qBAAqBG,CAAU,mBAAoB,CAAE,OAAAJ,EAAQ,GACxG,IAClB,EAGA,MAAM,gBAAgBA,EAUnB,CAED,OADiB,MAAMC,EAAI,IAAqC,yBAA0B,CAAE,OAAAD,EAAQ,GACpF,KAAK,IACvB,CACF"}