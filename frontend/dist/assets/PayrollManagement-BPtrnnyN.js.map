{"version":3,"file":"PayrollManagement-BPtrnnyN.js","sources":["../../src/pages/PayrollManagement.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\r\nimport { Plus, Edit, Trash2, DollarSign, Calendar, User, CheckCircle, Clock, Calculator, CreditCard } from 'lucide-react'\r\nimport { payrollService } from '../services/payrollService'\r\nimport { employeeService } from '../services/employeeService'\r\nimport { attendanceService } from '../services/attendanceService'\r\nimport { payrollSettingsService } from '../services/payrollSettingsService'\r\nimport { Payroll, CreatePayrollData, Employee } from '../types'\r\nimport toast from 'react-hot-toast'\r\n\r\nconst PayrollManagement: React.FC = () => {\r\n  const [showCreateModal, setShowCreateModal] = useState(false)\r\n  const [editingPayroll, setEditingPayroll] = useState<Payroll | null>(null)\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [statusFilter, setStatusFilter] = useState('')\r\n  const [monthFilter, setMonthFilter] = useState('')\r\n  const [yearFilter, setYearFilter] = useState('')\r\n  const [selectedEmployee, setSelectedEmployee] = useState('')\r\n  const [workingHoursData, setWorkingHoursData] = useState<any>(null)\r\n  \r\n  // Payment-related state\r\n  const [showPaymentModal, setShowPaymentModal] = useState(false)\r\n  const [showBulkPaymentModal, setShowBulkPaymentModal] = useState(false)\r\n  const [selectedPayroll, setSelectedPayroll] = useState<Payroll | null>(null)\r\n  const [selectedPayrolls, setSelectedPayrolls] = useState<string[]>([])\r\n  const [paymentData, setPaymentData] = useState({\r\n    paymentMethod: 'BANK_TRANSFER',\r\n    paymentReference: '',\r\n    paymentNotes: ''\r\n  })\r\n\r\n  const queryClient = useQueryClient()\r\n\r\n  // Calculate working hours for selected employee\r\n  const calculateWorkingHours = async () => {\r\n    if (!selectedEmployee || !monthFilter || !yearFilter) {\r\n      toast.error('Please select employee, month, and year')\r\n      return\r\n    }\r\n\r\n    try {\r\n      // Use the working hours analytics endpoint\r\n      const response = await attendanceService.getWorkingHoursAnalytics(\r\n        selectedEmployee,\r\n        `${yearFilter}-${monthFilter.toString().padStart(2, '0')}-01`,\r\n        `${yearFilter}-${monthFilter.toString().padStart(2, '0')}-31`\r\n      )\r\n\r\n      if (response.data?.insights) {\r\n        const insights = response.data.insights\r\n        setWorkingHoursData({\r\n          totalRegularHours: insights.totalRegularHours || 0,\r\n          totalOvertimeHours: insights.totalOvertimeHours || 0,\r\n          totalBreakHours: insights.totalBreakHours || 0,\r\n          totalWorkingDays: insights.totalDays || 0,\r\n          totalHours: insights.totalWorkingHours || 0\r\n        })\r\n\r\n        toast.success('Working hours calculated successfully!')\r\n      } else {\r\n        // Fallback to manual calculation if analytics endpoint fails\r\n        const response = await attendanceService.getAttendance({\r\n          employeeId: selectedEmployee,\r\n          startDate: `${yearFilter}-${monthFilter.toString().padStart(2, '0')}-01`,\r\n          endDate: `${yearFilter}-${monthFilter.toString().padStart(2, '0')}-31`,\r\n          limit: 100\r\n        })\r\n\r\n        if (response.data?.attendances) {\r\n          let totalRegularHours = 0\r\n          let totalOvertimeHours = 0\r\n          let totalBreakHours = 0\r\n          let totalWorkingDays = 0\r\n\r\n          response.data.attendances.forEach((attendance: any) => {\r\n            if (attendance.regularHours) totalRegularHours += Number(attendance.regularHours)\r\n            if (attendance.overtimeHours) totalOvertimeHours += Number(attendance.overtimeHours)\r\n            if (attendance.breakHours) totalBreakHours += Number(attendance.breakHours)\r\n            if (attendance.status === 'PRESENT' || attendance.status === 'HALF_DAY') totalWorkingDays++\r\n          })\r\n\r\n          setWorkingHoursData({\r\n            totalRegularHours,\r\n            totalOvertimeHours,\r\n            totalBreakHours,\r\n            totalWorkingDays,\r\n            totalHours: totalRegularHours + totalOvertimeHours\r\n          })\r\n\r\n          toast.success('Working hours calculated successfully!')\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Working hours calculation error:', error)\r\n      toast.error('Failed to calculate working hours')\r\n    }\r\n  }\r\n\r\n  // Calculate salary based on working hours using payroll settings\r\n  const calculateSalaryFromHours = async (employee: any, workingHours: any) => {\r\n    if (!employee || !workingHours) return null\r\n\r\n    try {\r\n      // Use the new payroll calculation API\r\n      const calculation = await payrollSettingsService.calculatePayroll(\r\n        employee.id,\r\n        monthFilter ? Number(monthFilter) : new Date().getMonth() + 1,\r\n        yearFilter ? Number(yearFilter) : new Date().getFullYear(),\r\n        workingHours\r\n      )\r\n\r\n      return {\r\n        basicSalary: calculation.calculation.basicSalary,\r\n        overtimePay: calculation.calculation.overtimePay,\r\n        totalPay: calculation.calculation.totalPay,\r\n        method: calculation.calculation.method,\r\n        breakdown: calculation.calculation.breakdown\r\n      }\r\n    } catch (error) {\r\n      console.error('Payroll calculation error:', error)\r\n      // Fallback to simple calculation\r\n      const hourlyRate = Number(employee.salary || 0) / 160\r\n      const regularPay = workingHours.totalRegularHours * hourlyRate\r\n      const overtimeRate = hourlyRate * 1.5\r\n      const overtimePay = workingHours.totalOvertimeHours * overtimeRate\r\n      \r\n      return {\r\n        basicSalary: regularPay,\r\n        overtimePay: overtimePay,\r\n        totalPay: regularPay + overtimePay,\r\n        method: 'FIXED_SALARY',\r\n        breakdown: { note: 'Fallback calculation' }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Fetch payroll records\r\n  const { data: payrollData, isLoading: payrollLoading } = useQuery(\r\n    ['payroll', searchTerm, statusFilter, monthFilter, yearFilter],\r\n    () => payrollService.getPayrolls({\r\n      search: searchTerm,\r\n      status: statusFilter,\r\n      month: monthFilter ? Number(monthFilter) : undefined,\r\n      year: yearFilter ? Number(yearFilter) : undefined,\r\n      limit: 50\r\n    })\r\n  )\r\n\r\n  // Fetch employees\r\n  const { data: employeesData, error: employeesError, isLoading: employeesLoading } = useQuery(\r\n    'employees',\r\n    () => employeeService.getEmployees({ limit: 100 })\r\n  )\r\n\r\n  // Debug logging\r\n  console.log('Employees Data:', employeesData);\r\n  console.log('Employees Error:', employeesError);\r\n  console.log('Employees Loading:', employeesLoading);\r\n\r\n  // Fetch payroll statistics\r\n  const { data: statsData } = useQuery(\r\n    ['payroll-stats', monthFilter, yearFilter],\r\n    () => payrollService.getPayrollStats({\r\n      month: monthFilter ? Number(monthFilter) : undefined,\r\n      year: yearFilter ? Number(yearFilter) : undefined\r\n    })\r\n  )\r\n\r\n  // Create payroll mutation\r\n  const createPayrollMutation = useMutation(payrollService.createPayroll, {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries('payroll')\r\n      queryClient.invalidateQueries('payroll-stats')\r\n      setShowCreateModal(false)\r\n      toast.success('Payroll record created successfully')\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || 'Failed to create payroll record')\r\n    }\r\n  })\r\n\r\n  // Update payroll mutation\r\n  const updatePayrollMutation = useMutation(\r\n    ({ id, data }: { id: string; data: Partial<CreatePayrollData> }) =>\r\n      payrollService.updatePayroll(id, data),\r\n    {\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries('payroll')\r\n        queryClient.invalidateQueries('payroll-stats')\r\n        setEditingPayroll(null)\r\n        toast.success('Payroll record updated successfully')\r\n      },\r\n      onError: (error: any) => {\r\n        toast.error(error.response?.data?.error || 'Failed to update payroll record')\r\n      }\r\n    }\r\n  )\r\n\r\n\r\n  // Delete payroll mutation\r\n  const deletePayrollMutation = useMutation(payrollService.deletePayroll, {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries('payroll')\r\n      queryClient.invalidateQueries('payroll-stats')\r\n      toast.success('Payroll record deleted successfully')\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || 'Failed to delete payroll record')\r\n    }\r\n  })\r\n\r\n  // Process payment mutation\r\n  const processPaymentMutation = useMutation(\r\n    ({ id, paymentData }: { id: string; paymentData: any }) =>\r\n      payrollService.processPayment(id, paymentData),\r\n    {\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries('payroll')\r\n        queryClient.invalidateQueries('payroll-stats')\r\n        toast.success('Salary payment processed successfully')\r\n        setShowPaymentModal(false)\r\n        setSelectedPayroll(null)\r\n      },\r\n      onError: (error: any) => {\r\n        toast.error(error.response?.data?.error || 'Failed to process payment')\r\n      }\r\n    }\r\n  )\r\n\r\n  // Bulk payment mutation\r\n  const bulkPaymentMutation = useMutation(payrollService.bulkPayment, {\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries('payroll')\r\n      queryClient.invalidateQueries('payroll-stats')\r\n      toast.success(`Bulk payment processed for ${data.updatedCount} employees`)\r\n      setShowBulkPaymentModal(false)\r\n      setSelectedPayrolls([])\r\n    },\r\n    onError: (error: any) => {\r\n      toast.error(error.response?.data?.error || 'Failed to process bulk payment')\r\n    }\r\n  })\r\n\r\n  const handleCreatePayroll = (data: CreatePayrollData) => {\r\n    createPayrollMutation.mutate(data)\r\n  }\r\n\r\n  const handleUpdatePayroll = (data: Partial<CreatePayrollData>) => {\r\n    if (editingPayroll) {\r\n      updatePayrollMutation.mutate({ id: editingPayroll.id, data })\r\n    }\r\n  }\r\n\r\n\r\n  const handleDeletePayroll = (id: string) => {\r\n    if (window.confirm('Are you sure you want to delete this payroll record?')) {\r\n      deletePayrollMutation.mutate(id)\r\n    }\r\n  }\r\n\r\n  // Payment handlers\r\n  const handleProcessPayment = (payroll: Payroll) => {\r\n    setSelectedPayroll(payroll)\r\n    setShowPaymentModal(true)\r\n  }\r\n\r\n  const handleBulkPayment = () => {\r\n    if (selectedPayrolls.length === 0) {\r\n      toast.error('Please select payroll records for bulk payment')\r\n      return\r\n    }\r\n    setShowBulkPaymentModal(true)\r\n  }\r\n\r\n  const handlePaymentSubmit = () => {\r\n    if (selectedPayroll) {\r\n      processPaymentMutation.mutate({\r\n        id: selectedPayroll.id,\r\n        paymentData\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleBulkPaymentSubmit = () => {\r\n    bulkPaymentMutation.mutate({\r\n      payrollIds: selectedPayrolls,\r\n      ...paymentData\r\n    })\r\n  }\r\n\r\n  const handlePayrollSelect = (payrollId: string, checked: boolean) => {\r\n    if (checked) {\r\n      setSelectedPayrolls([...selectedPayrolls, payrollId])\r\n    } else {\r\n      setSelectedPayrolls(selectedPayrolls.filter(id => id !== payrollId))\r\n    }\r\n  }\r\n\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount)\r\n  }\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'PENDING':\r\n        return 'bg-yellow-100 text-yellow-800'\r\n      case 'PROCESSED':\r\n        return 'bg-blue-100 text-blue-800'\r\n      case 'PAID':\r\n        return 'bg-green-100 text-green-800'\r\n      case 'CANCELLED':\r\n        return 'bg-red-100 text-red-800'\r\n      default:\r\n        return 'bg-gray-100 text-gray-800'\r\n    }\r\n  }\r\n\r\n  const getMonthName = (month: number) => {\r\n    const months = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'\r\n    ]\r\n    return months[month - 1]\r\n  }\r\n\r\n  if (payrollLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900\">Payroll Management</h1>\r\n          <p className=\"text-gray-600\">Manage employee salaries and payroll processing</p>\r\n        </div>\r\n        <div className=\"flex gap-3 mt-4 sm:mt-0\">\r\n          <button\r\n            onClick={() => setShowCreateModal(true)}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            Create Payroll\r\n          </button>\r\n          {selectedPayrolls.length > 0 && (\r\n            <button\r\n              onClick={handleBulkPayment}\r\n              className=\"btn btn-secondary\"\r\n            >\r\n              <CreditCard className=\"w-4 h-4 mr-2\" />\r\n              Bulk Payment ({selectedPayrolls.length})\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistics Cards */}\r\n      {statsData && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <div className=\"card p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                <DollarSign className=\"w-6 h-6 text-blue-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Total Payrolls</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{statsData.totalPayrolls}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"card p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\r\n                <Calendar className=\"w-6 h-6 text-yellow-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Pending</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{statsData.pendingPayrolls}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"card p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                <CheckCircle className=\"w-6 h-6 text-green-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Paid</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{statsData.paidPayrolls}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"card p-6\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                <DollarSign className=\"w-6 h-6 text-purple-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Total Amount</p>\r\n                <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(statsData.totalAmount)}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Working Hours Calculation */}\r\n      <div className=\"card p-6\">\r\n        <div className=\"flex items-center mb-4\">\r\n          <Calculator className=\"w-5 h-5 text-blue-600 mr-2\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">Working Hours Calculator</h3>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Employee</label>\r\n            <select\r\n              value={selectedEmployee}\r\n              onChange={(e) => setSelectedEmployee(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              disabled={employeesLoading}\r\n            >\r\n              <option value=\"\">\r\n                {employeesLoading ? 'Loading employees...' : 'Select Employee'}\r\n              </option>\r\n              {employeesError && (\r\n                <option value=\"\" disabled>\r\n                  Error loading employees\r\n                </option>\r\n              )}\r\n              {employeesData?.data?.employees?.map((employee: any) => (\r\n                <option key={employee.id} value={employee.id}>\r\n                  {employee.user.firstName} {employee.user.lastName} - {employee.employeeId}\r\n                </option>\r\n              ))}\r\n              {employeesData?.data?.employees?.length === 0 && !employeesLoading && (\r\n                <option value=\"\" disabled>\r\n                  No employees found\r\n                </option>\r\n              )}\r\n            </select>\r\n          </div>\r\n          \r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Month</label>\r\n            <select\r\n              value={monthFilter}\r\n              onChange={(e) => setMonthFilter(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"\">Select Month</option>\r\n              {Array.from({ length: 12 }, (_, i) => (\r\n                <option key={i + 1} value={i + 1}>\r\n                  {getMonthName(i + 1)}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Year</label>\r\n            <select\r\n              value={yearFilter}\r\n              onChange={(e) => setYearFilter(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"\">Select Year</option>\r\n              {Array.from({ length: 5 }, (_, i) => {\r\n                const year = new Date().getFullYear() - 2 + i\r\n                return (\r\n                  <option key={year} value={year}>\r\n                    {year}\r\n                  </option>\r\n                )\r\n              })}\r\n            </select>\r\n          </div>\r\n          \r\n          <div className=\"flex items-end\">\r\n            <button\r\n              onClick={calculateWorkingHours}\r\n              className=\"w-full btn btn-primary flex items-center justify-center\"\r\n            >\r\n              <Clock className=\"w-4 h-4 mr-2\" />\r\n              Calculate Hours\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Working Hours Results */}\r\n        {workingHoursData && (\r\n          <div className=\"bg-gray-50 rounded-lg p-4\">\r\n            <div className=\"flex justify-between items-center mb-3\">\r\n              <h4 className=\"text-md font-semibold text-gray-900\">Working Hours Summary</h4>\r\n              <button\r\n                onClick={async () => {\r\n                  const selectedEmp = employeesData?.data?.employees?.find((emp: any) => emp.id === selectedEmployee)\r\n                  if (selectedEmp) {\r\n                    try {\r\n                      const salaryCalc = await calculateSalaryFromHours(selectedEmp, workingHoursData)\r\n                      if (salaryCalc) {\r\n                        setShowCreateModal(true)\r\n                        // Pre-fill the create modal with calculated values\r\n                        console.log('Calculated salary:', salaryCalc)\r\n                        toast.success(`Salary calculated using ${salaryCalc.method} method! Please review in the create payroll form.`)\r\n                      }\r\n                    } catch (error) {\r\n                      console.error('Salary calculation error:', error)\r\n                      toast.error('Failed to calculate salary')\r\n                    }\r\n                  }\r\n                }}\r\n                className=\"btn btn-primary btn-sm flex items-center gap-2\"\r\n              >\r\n                <Calculator className=\"w-4 h-4\" />\r\n                Calculate Salary\r\n              </button>\r\n            </div>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">{workingHoursData.totalWorkingDays}</div>\r\n                <div className=\"text-sm text-gray-600\">Working Days</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">{workingHoursData.totalRegularHours.toFixed(1)}h</div>\r\n                <div className=\"text-sm text-gray-600\">Regular Hours</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-orange-600\">{workingHoursData.totalOvertimeHours.toFixed(1)}h</div>\r\n                <div className=\"text-sm text-gray-600\">Overtime Hours</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-gray-600\">{workingHoursData.totalBreakHours.toFixed(1)}h</div>\r\n                <div className=\"text-sm text-gray-600\">Break Hours</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">{workingHoursData.totalHours.toFixed(1)}h</div>\r\n                <div className=\"text-sm text-gray-600\">Total Hours</div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Salary Calculation Preview */}\r\n            {(() => {\r\n              const selectedEmp = employeesData?.data?.employees?.find((emp: any) => emp.id === selectedEmployee)\r\n              if (selectedEmp) {\r\n                // Note: This is now async, so we'll show a loading state or use a different approach\r\n                return (\r\n                  <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\r\n                    <h5 className=\"font-semibold text-blue-900 mb-2\">Salary Calculation</h5>\r\n                    <div className=\"text-sm text-gray-600 mb-2\">\r\n                      Method: {selectedEmp.payrollMethod || 'FIXED_SALARY'}\r\n                    </div>\r\n                    <div className=\"text-xs text-gray-500\">\r\n                      Click \"Calculate Salary\" to get detailed calculation based on current payroll settings\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n              return null\r\n            })()}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search payroll...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"input w-full\"\r\n          />\r\n        </div>\r\n        <select\r\n          value={statusFilter}\r\n          onChange={(e) => setStatusFilter(e.target.value)}\r\n          className=\"input w-full\"\r\n        >\r\n          <option value=\"\">All Status</option>\r\n          <option value=\"PENDING\">Pending</option>\r\n          <option value=\"PROCESSED\">Processed</option>\r\n          <option value=\"PAID\">Paid</option>\r\n          <option value=\"CANCELLED\">Cancelled</option>\r\n        </select>\r\n        <select\r\n          value={monthFilter}\r\n          onChange={(e) => setMonthFilter(e.target.value)}\r\n          className=\"input w-full\"\r\n        >\r\n          <option value=\"\">All Months</option>\r\n          {Array.from({ length: 12 }, (_, i) => (\r\n            <option key={i + 1} value={i + 1}>\r\n              {getMonthName(i + 1)}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <select\r\n          value={yearFilter}\r\n          onChange={(e) => setYearFilter(e.target.value)}\r\n          className=\"input w-full\"\r\n        >\r\n          <option value=\"\">All Years</option>\r\n          {Array.from({ length: 5 }, (_, i) => {\r\n            const year = new Date().getFullYear() - i\r\n            return (\r\n              <option key={year} value={year}>\r\n                {year}\r\n              </option>\r\n            )\r\n          })}\r\n        </select>\r\n        <button\r\n          onClick={() => {\r\n            setSearchTerm('')\r\n            setStatusFilter('')\r\n            setMonthFilter('')\r\n            setYearFilter('')\r\n          }}\r\n          className=\"btn btn-outline\"\r\n        >\r\n          Clear Filters\r\n        </button>\r\n      </div>\r\n\r\n      {/* Payroll Table */}\r\n      <div className=\"card overflow-hidden\">\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Employee\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Period\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Basic Salary\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Overtime\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Net Salary\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Status\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Actions\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {payrollData?.data.payrolls?.map((payroll) => (\r\n                <tr key={payroll.id} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <div className=\"flex items-center\">\r\n                      <div className=\"flex-shrink-0 h-10 w-10\">\r\n                        <div className=\"h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center\">\r\n                          <User className=\"w-5 h-5 text-gray-600\" />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"ml-4\">\r\n                        <div className=\"text-sm font-medium text-gray-900\">\r\n                          {payroll.employee?.user.firstName} {payroll.employee?.user.lastName}\r\n                        </div>\r\n                        <div className=\"text-sm text-gray-500\">\r\n                          {payroll.employee?.employeeId}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    {getMonthName(payroll.month)} {payroll.year}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    {formatCurrency(payroll.basicSalary)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                    {formatCurrency(payroll.overtimePay)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                    {formatCurrency(payroll.netSalary)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(payroll.status)}`}>\r\n                      {payroll.status}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n                    <div className=\"flex space-x-2\">\r\n                      <button\r\n                        onClick={() => setEditingPayroll(payroll)}\r\n                        className=\"text-blue-600 hover:text-blue-900\"\r\n                      >\r\n                        <Edit className=\"w-4 h-4\" />\r\n                      </button>\r\n                      {payroll.status !== 'PAID' && (\r\n                        <button\r\n                          onClick={() => handleProcessPayment(payroll)}\r\n                          className=\"text-green-600 hover:text-green-900\"\r\n                          title=\"Process Payment\"\r\n                        >\r\n                          <CreditCard className=\"w-4 h-4\" />\r\n                        </button>\r\n                      )}\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedPayrolls.includes(payroll.id)}\r\n                        onChange={(e) => handlePayrollSelect(payroll.id, e.target.checked)}\r\n                        className=\"rounded border-gray-300\"\r\n                      />\r\n                      <button\r\n                        onClick={() => handleDeletePayroll(payroll.id)}\r\n                        className=\"text-red-600 hover:text-red-900\"\r\n                      >\r\n                        <Trash2 className=\"w-4 h-4\" />\r\n                      </button>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Create Payroll Modal */}\r\n      {showCreateModal && (\r\n        <CreatePayrollModal\r\n          employees={employeesData?.data?.employees || []}\r\n          onClose={() => setShowCreateModal(false)}\r\n          onSubmit={handleCreatePayroll}\r\n          isLoading={createPayrollMutation.isLoading}\r\n          preCalculatedData={null}\r\n        />\r\n      )}\r\n\r\n      {/* Edit Payroll Modal */}\r\n      {editingPayroll && (\r\n        <EditPayrollModal\r\n          payroll={editingPayroll}\r\n          onClose={() => setEditingPayroll(null)}\r\n          onSubmit={handleUpdatePayroll}\r\n          isLoading={updatePayrollMutation.isLoading}\r\n        />\r\n      )}\r\n\r\n      {/* Payment Modal */}\r\n      {showPaymentModal && selectedPayroll && (\r\n        <PaymentModal\r\n          payroll={selectedPayroll}\r\n          paymentData={paymentData}\r\n          setPaymentData={setPaymentData}\r\n          onClose={() => {\r\n            setShowPaymentModal(false)\r\n            setSelectedPayroll(null)\r\n          }}\r\n          onSubmit={handlePaymentSubmit}\r\n          isLoading={processPaymentMutation.isLoading}\r\n        />\r\n      )}\r\n\r\n      {/* Bulk Payment Modal */}\r\n      {showBulkPaymentModal && (\r\n        <BulkPaymentModal\r\n          selectedCount={selectedPayrolls.length}\r\n          paymentData={paymentData}\r\n          setPaymentData={setPaymentData}\r\n          onClose={() => {\r\n            setShowBulkPaymentModal(false)\r\n            setSelectedPayrolls([])\r\n          }}\r\n          onSubmit={handleBulkPaymentSubmit}\r\n          isLoading={bulkPaymentMutation.isLoading}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n// Create Payroll Modal Component\r\nconst CreatePayrollModal: React.FC<{\r\n  employees: Employee[]\r\n  onClose: () => void\r\n  onSubmit: (data: CreatePayrollData) => void\r\n  isLoading: boolean\r\n  preCalculatedData?: any\r\n}> = ({ employees, onClose, onSubmit, isLoading, preCalculatedData }) => {\r\n  const [formData, setFormData] = useState<CreatePayrollData>({\r\n    employeeId: preCalculatedData?.employeeId || '',\r\n    month: preCalculatedData?.month || new Date().getMonth() + 1,\r\n    year: preCalculatedData?.year || new Date().getFullYear(),\r\n    basicSalary: preCalculatedData?.basicSalary || 0,\r\n    overtimePay: preCalculatedData?.overtimePay || 0,\r\n    allowances: preCalculatedData?.allowances || 0,\r\n    deductions: preCalculatedData?.deductions || 0\r\n  })\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    onSubmit(formData)\r\n  }\r\n\r\n  const getMonthName = (month: number) => {\r\n    const months = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'\r\n    ]\r\n    return months[month - 1]\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Create Payroll Record</h2>\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"label\">Employee</label>\r\n            <select\r\n              value={formData.employeeId}\r\n              onChange={(e) => setFormData({ ...formData, employeeId: e.target.value })}\r\n              className=\"input\"\r\n              required\r\n            >\r\n              <option value=\"\">Select Employee</option>\r\n              {employees.map((employee) => (\r\n                <option key={employee.id} value={employee.id}>\r\n                  {employee.user.firstName} {employee.user.lastName} - {employee.employeeId}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label className=\"label\">Month</label>\r\n              <select\r\n                value={formData.month}\r\n                onChange={(e) => setFormData({ ...formData, month: Number(e.target.value) })}\r\n                className=\"input\"\r\n                required\r\n              >\r\n                {Array.from({ length: 12 }, (_, i) => (\r\n                  <option key={i + 1} value={i + 1}>\r\n                    {getMonthName(i + 1)}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label className=\"label\">Year</label>\r\n              <select\r\n                value={formData.year}\r\n                onChange={(e) => setFormData({ ...formData, year: Number(e.target.value) })}\r\n                className=\"input\"\r\n                required\r\n              >\r\n                {Array.from({ length: 5 }, (_, i) => {\r\n                  const year = new Date().getFullYear() - i\r\n                  return (\r\n                    <option key={year} value={year}>\r\n                      {year}\r\n                    </option>\r\n                  )\r\n                })}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label className=\"label\">Basic Salary</label>\r\n            <input\r\n              type=\"number\"\r\n              value={formData.basicSalary}\r\n              onChange={(e) => setFormData({ ...formData, basicSalary: Number(e.target.value) })}\r\n              className=\"input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"label\">Overtime Pay</label>\r\n            <input\r\n              type=\"number\"\r\n              value={formData.overtimePay}\r\n              onChange={(e) => setFormData({ ...formData, overtimePay: Number(e.target.value) })}\r\n              className=\"input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"label\">Allowances</label>\r\n            <input\r\n              type=\"number\"\r\n              value={formData.allowances}\r\n              onChange={(e) => setFormData({ ...formData, allowances: Number(e.target.value) })}\r\n              className=\"input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"label\">Deductions</label>\r\n            <input\r\n              type=\"number\"\r\n              value={formData.deductions}\r\n              onChange={(e) => setFormData({ ...formData, deductions: Number(e.target.value) })}\r\n              className=\"input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <button type=\"button\" onClick={onClose} className=\"btn btn-secondary\">\r\n              Cancel\r\n            </button>\r\n            <button type=\"submit\" className=\"btn btn-primary\" disabled={isLoading}>\r\n              {isLoading ? 'Creating...' : 'Create Payroll'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Edit Payroll Modal Component\r\nconst EditPayrollModal: React.FC<{\r\n  payroll: Payroll\r\n  onClose: () => void\r\n  onSubmit: (data: Partial<CreatePayrollData>) => void\r\n  isLoading: boolean\r\n}> = ({ payroll, onClose, onSubmit, isLoading }) => {\r\n  const [formData, setFormData] = useState<Partial<CreatePayrollData>>({\r\n    basicSalary: payroll.basicSalary,\r\n    overtimePay: payroll.overtimePay,\r\n    allowances: payroll.allowances,\r\n    deductions: payroll.deductions\r\n  })\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    onSubmit(formData)\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Edit Payroll Record</h2>\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"label\">Basic Salary</label>\r\n            <input\r\n              type=\"number\"\r\n              value={formData.basicSalary}\r\n              onChange={(e) => setFormData({ ...formData, basicSalary: Number(e.target.value) })}\r\n              className=\"input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"label\">Overtime Pay</label>\r\n            <input\r\n              type=\"number\"\r\n              value={formData.overtimePay}\r\n              onChange={(e) => setFormData({ ...formData, overtimePay: Number(e.target.value) })}\r\n              className=\"input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"label\">Allowances</label>\r\n            <input\r\n              type=\"number\"\r\n              value={formData.allowances}\r\n              onChange={(e) => setFormData({ ...formData, allowances: Number(e.target.value) })}\r\n              className=\"input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"label\">Deductions</label>\r\n            <input\r\n              type=\"number\"\r\n              value={formData.deductions}\r\n              onChange={(e) => setFormData({ ...formData, deductions: Number(e.target.value) })}\r\n              className=\"input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <button type=\"button\" onClick={onClose} className=\"btn btn-secondary\">\r\n              Cancel\r\n            </button>\r\n            <button type=\"submit\" className=\"btn btn-primary\" disabled={isLoading}>\r\n              {isLoading ? 'Updating...' : 'Update Payroll'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Payment Processing Modal\r\nconst PaymentModal: React.FC<{\r\n  payroll: Payroll\r\n  paymentData: any\r\n  setPaymentData: (data: any) => void\r\n  onClose: () => void\r\n  onSubmit: () => void\r\n  isLoading: boolean\r\n}> = ({ payroll, paymentData, setPaymentData, onClose, onSubmit, isLoading }) => {\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    onSubmit()\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Process Salary Payment</h2>\r\n        <div className=\"mb-4 p-4 bg-gray-50 rounded-lg\">\r\n          <div className=\"text-sm text-gray-600\">Employee: {payroll.employee?.user?.firstName} {payroll.employee?.user?.lastName}</div>\r\n          <div className=\"text-sm text-gray-600\">Amount: {new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(payroll.netSalary)}</div>\r\n          <div className=\"text-sm text-gray-600\">Month: {payroll.month}/{payroll.year}</div>\r\n        </div>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"label\">Payment Method</label>\r\n            <select\r\n              value={paymentData.paymentMethod}\r\n              onChange={(e) => setPaymentData({...paymentData, paymentMethod: e.target.value})}\r\n              className=\"input\"\r\n              required\r\n            >\r\n              <option value=\"BANK_TRANSFER\">Bank Transfer</option>\r\n              <option value=\"CASH\">Cash</option>\r\n              <option value=\"CHECK\">Check</option>\r\n              <option value=\"MOBILE_MONEY\">Mobile Money</option>\r\n              <option value=\"CRYPTOCURRENCY\">Cryptocurrency</option>\r\n              <option value=\"OTHER\">Other</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"label\">Payment Reference</label>\r\n            <input\r\n              type=\"text\"\r\n              value={paymentData.paymentReference}\r\n              onChange={(e) => setPaymentData({...paymentData, paymentReference: e.target.value})}\r\n              className=\"input\"\r\n              placeholder=\"Transaction ID, check number, etc.\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"label\">Payment Notes</label>\r\n            <textarea\r\n              value={paymentData.paymentNotes}\r\n              onChange={(e) => setPaymentData({...paymentData, paymentNotes: e.target.value})}\r\n              className=\"input\"\r\n              rows={3}\r\n              placeholder=\"Additional payment notes...\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"btn btn-outline\"\r\n              disabled={isLoading}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Processing...' : 'Process Payment'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Bulk Payment Modal\r\nconst BulkPaymentModal: React.FC<{\r\n  selectedCount: number\r\n  paymentData: any\r\n  setPaymentData: (data: any) => void\r\n  onClose: () => void\r\n  onSubmit: () => void\r\n  isLoading: boolean\r\n}> = ({ selectedCount, paymentData, setPaymentData, onClose, onSubmit, isLoading }) => {\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    onSubmit()\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Bulk Salary Payment</h2>\r\n        <div className=\"mb-4 p-4 bg-blue-50 rounded-lg\">\r\n          <div className=\"text-sm text-blue-600\">Processing payment for {selectedCount} employees</div>\r\n        </div>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"label\">Payment Method</label>\r\n            <select\r\n              value={paymentData.paymentMethod}\r\n              onChange={(e) => setPaymentData({...paymentData, paymentMethod: e.target.value})}\r\n              className=\"input\"\r\n              required\r\n            >\r\n              <option value=\"BANK_TRANSFER\">Bank Transfer</option>\r\n              <option value=\"CASH\">Cash</option>\r\n              <option value=\"CHECK\">Check</option>\r\n              <option value=\"MOBILE_MONEY\">Mobile Money</option>\r\n              <option value=\"CRYPTOCURRENCY\">Cryptocurrency</option>\r\n              <option value=\"OTHER\">Other</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"label\">Payment Reference</label>\r\n            <input\r\n              type=\"text\"\r\n              value={paymentData.paymentReference}\r\n              onChange={(e) => setPaymentData({...paymentData, paymentReference: e.target.value})}\r\n              className=\"input\"\r\n              placeholder=\"Batch reference, transaction ID, etc.\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"label\">Payment Notes</label>\r\n            <textarea\r\n              value={paymentData.paymentNotes}\r\n              onChange={(e) => setPaymentData({...paymentData, paymentNotes: e.target.value})}\r\n              className=\"input\"\r\n              rows={3}\r\n              placeholder=\"Notes for all payments...\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"btn btn-outline\"\r\n              disabled={isLoading}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Processing...' : `Process ${selectedCount} Payments`}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PayrollManagement\r\n\r\n"],"names":["PayrollManagement","showCreateModal","setShowCreateModal","useState","editingPayroll","setEditingPayroll","searchTerm","setSearchTerm","statusFilter","setStatusFilter","monthFilter","setMonthFilter","yearFilter","setYearFilter","selectedEmployee","setSelectedEmployee","workingHoursData","setWorkingHoursData","showPaymentModal","setShowPaymentModal","showBulkPaymentModal","setShowBulkPaymentModal","selectedPayroll","setSelectedPayroll","selectedPayrolls","setSelectedPayrolls","paymentData","setPaymentData","queryClient","useQueryClient","calculateWorkingHours","toast","response","attendanceService","_a","insights","totalRegularHours","totalOvertimeHours","totalBreakHours","totalWorkingDays","attendance","error","calculateSalaryFromHours","employee","workingHours","calculation","payrollSettingsService","hourlyRate","regularPay","overtimeRate","overtimePay","payrollData","payrollLoading","useQuery","payrollService","employeesData","employeesError","employeesLoading","employeeService","statsData","createPayrollMutation","useMutation","_b","updatePayrollMutation","id","data","deletePayrollMutation","processPaymentMutation","bulkPaymentMutation","handleCreatePayroll","handleUpdatePayroll","handleDeletePayroll","handleProcessPayment","payroll","handleBulkPayment","handlePaymentSubmit","handleBulkPaymentSubmit","handlePayrollSelect","payrollId","checked","formatCurrency","amount","getStatusColor","status","getMonthName","month","jsx","jsxs","Plus","CreditCard","DollarSign","Calendar","CheckCircle","Calculator","e","_d","_c","_","i","year","Clock","selectedEmp","emp","salaryCalc","_e","User","Edit","Trash2","CreatePayrollModal","_f","EditPayrollModal","PaymentModal","BulkPaymentModal","employees","onClose","onSubmit","isLoading","preCalculatedData","formData","setFormData","handleSubmit","selectedCount"],"mappings":"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"}